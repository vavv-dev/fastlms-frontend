// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { PublicCreateUserData, PublicCreateUserResponse, PublicVerifyEmailData, PublicVerifyEmailResponse, PublicResendVerificationEmailData, PublicResendVerificationEmailResponse, PublicLoginData, PublicLoginResponse, PublicPasswordResetData, PublicPasswordResetResponse, PublicPasswordResetConfirmData, PublicPasswordResetConfirmResponse, PublicInvitationAcceptData, PublicInvitationAcceptResponse, AccountGetMeData, AccountGetMeResponse, AccountUpdateMeData, AccountUpdateMeResponse, AccountGetUserData, AccountGetUserResponse, AccountGetUserByUsernameData, AccountGetUserByUsernameResponse, AccountLogoutData, AccountLogoutResponse, AccountUploadFilesData, AccountUploadFilesResponse, CommentGetThreadsData, CommentGetThreadsResponse, CommentCreateThreadData, CommentCreateThreadResponse, CommentUpdateThreadData, CommentUpdateThreadResponse, CommentCreateResourceData, CommentCreateResourceResponse, CommentUpdateResourceData, CommentUpdateResourceResponse, CommentToggleActionData, CommentToggleActionResponse, PublicGetThreadData, PublicGetThreadResponse, PublicGetCommentsData, PublicGetCommentsResponse, VideoGetDisplaysData, VideoGetDisplaysResponse, VideoImportYoutubeVideoData, VideoImportYoutubeVideoResponse, VideoGetTagsData, VideoGetTagsResponse, VideoGetViewData, VideoGetViewResponse, VideoGetSubtitlesData, VideoGetSubtitlesResponse, VideoGetResourceData, VideoGetResourceResponse, VideoUpdateResourceData, VideoUpdateResourceResponse, VideoDeleteResourceData, VideoDeleteResourceResponse, VideoGetWatchBitmapData, VideoGetWatchBitmapResponse, VideoStartWatchData, VideoStartWatchResponse, VideoUpdateWatchData, VideoUpdateWatchResponse, VideoDeleteWatchData, VideoDeleteWatchResponse, VideoGetVideoReportData, VideoGetVideoReportResponse, VideoDownloadVideoReportData, VideoDownloadVideoReportResponse, VideoToggleActionData, VideoToggleActionResponse, PlaylistGetDisplaysData, PlaylistGetDisplaysResponse, PlaylistImportYoutubePlaylistData, PlaylistImportYoutubePlaylistResponse, PlaylistUpdatePlaylistVideosData, PlaylistUpdatePlaylistVideosResponse, PlaylistGetViewData, PlaylistGetViewResponse, PlaylistResumePlaylistData, PlaylistResumePlaylistResponse, PlaylistGetResourceData, PlaylistGetResourceResponse, PlaylistUpdateResourceData, PlaylistUpdateResourceResponse, PlaylistDeleteResourceData, PlaylistDeleteResourceResponse, PlaylistCreateResourceData, PlaylistCreateResourceResponse, PlaylistGetPlaylistReportData, PlaylistGetPlaylistReportResponse, PlaylistDownloadPlaylistReportData, PlaylistDownloadPlaylistReportResponse, PlaylistCheckVideoData, PlaylistCheckVideoResponse, PlaylistToggleActionData, PlaylistToggleActionResponse, AssetGetDisplaysData, AssetGetDisplaysResponse, AssetGetDisplayData, AssetGetDisplayResponse, AssetGetResourceData, AssetGetResourceResponse, AssetUpdateResourceData, AssetUpdateResourceResponse, AssetDeleteResourceData, AssetDeleteResourceResponse, AssetCreateResourceData, AssetCreateResourceResponse, AssetGetWatchBitmapData, AssetGetWatchBitmapResponse, AssetStartWatchData, AssetStartWatchResponse, AssetUpdateWatchData, AssetUpdateWatchResponse, AssetDeleteWatchData, AssetDeleteWatchResponse, AssetGetAssetReportData, AssetGetAssetReportResponse, AssetDownloadAssetReportData, AssetDownloadAssetReportResponse, AssetToggleActionData, AssetToggleActionResponse, AssetPresignedUploadUrlData, AssetPresignedUploadUrlResponse, AssetHtmlViewData, AssetHtmlViewResponse, AssetPdfViewData, AssetPdfViewResponse, QuizGetDisplaysData, QuizGetDisplaysResponse, QuizGetResourceData, QuizGetResourceResponse, QuizUpdateResourceData, QuizUpdateResourceResponse, QuizDeleteResourceData, QuizDeleteResourceResponse, QuizCreateResourceData, QuizCreateResourceResponse, QuizGetAttemptData, QuizGetAttemptResponse, QuizReadyAttemptData, QuizReadyAttemptResponse, QuizSubmitAttemptData, QuizSubmitAttemptResponse, QuizDeleteAttemptData, QuizDeleteAttemptResponse, QuizGetQuizReportData, QuizGetQuizReportResponse, QuizDownloadQuizReportData, QuizDownloadQuizReportResponse, QuizToggleActionData, QuizToggleActionResponse, QuizGetOwnedQuestionsData, QuizGetOwnedQuestionsResponse, SurveyGetDisplaysData, SurveyGetDisplaysResponse, SurveyGetResourceData, SurveyGetResourceResponse, SurveyUpdateResourceData, SurveyUpdateResourceResponse, SurveyDeleteResourceData, SurveyDeleteResourceResponse, SurveyCreateResourceData, SurveyCreateResourceResponse, SurveyGetAttemptData, SurveyGetAttemptResponse, SurveyReadyAttemptData, SurveyReadyAttemptResponse, SurveySubmitAttemptData, SurveySubmitAttemptResponse, SurveyDeleteAttemptData, SurveyDeleteAttemptResponse, SurveyGetSurveyReportData, SurveyGetSurveyReportResponse, SurveyDownloadSurveyReportData, SurveyDownloadSurveyReportResponse, SurveyToggleActionData, SurveyToggleActionResponse, SurveyGetOwnedQuestionsData, SurveyGetOwnedQuestionsResponse, ExamGetDisplaysData, ExamGetDisplaysResponse, ExamGetResourceData, ExamGetResourceResponse, ExamUpdateResourceData, ExamUpdateResourceResponse, ExamDeleteResourceData, ExamDeleteResourceResponse, ExamCreateResourceData, ExamCreateResourceResponse, ExamGetAttemptData, ExamGetAttemptResponse, ExamReadyAttemptData, ExamReadyAttemptResponse, ExamStartAttemptData, ExamStartAttemptResponse, ExamSubmitAttemptData, ExamSubmitAttemptResponse, ExamDeleteAttemptData, ExamDeleteAttemptResponse, ExamGetGradingData, ExamGetGradingResponse, ExamSubmitGradingData, ExamSubmitGradingResponse, ExamGetExamReportData, ExamGetExamReportResponse, ExamDownloadExamReportData, ExamDownloadExamReportResponse, ExamGetGradingSubmissionsData, ExamGetGradingSubmissionsResponse, ExamToggleActionData, ExamToggleActionResponse, ExamGetOwnedQuestionsData, ExamGetOwnedQuestionsResponse, LessonGetDisplaysData, LessonGetDisplaysResponse, LessonGetDisplayData, LessonGetDisplayResponse, LessonGetResourceData, LessonGetResourceResponse, LessonUpdateResourceData, LessonUpdateResourceResponse, LessonDeleteResourceData, LessonDeleteResourceResponse, LessonCreateResourceData, LessonCreateResourceResponse, LessonToggleActionData, LessonToggleActionResponse, CourseGetDisplaysData, CourseGetDisplaysResponse, CourseGetResourceData, CourseGetResourceResponse, CourseUpdateResourceData, CourseUpdateResourceResponse, CourseDeleteResourceData, CourseDeleteResourceResponse, CourseCreateResourceData, CourseCreateResourceResponse, CourseGetViewData, CourseGetViewResponse, CourseEnrollData, CourseEnrollResponse2, CourseUnenrollData, CourseUnenrollResponse, CourseUpdateLearningData, CourseUpdateLearningResponse, CourseGetCourseReportData, CourseGetCourseReportResponse, CourseDownloadCourseReportData, CourseDownloadCourseReportResponse, CourseToggleActionData, CourseToggleActionResponse, CourseCreateEsimsaCourseData, CourseCreateEsimsaCourseResponse, SharedGetDisplaysData, SharedGetDisplaysResponse, SharedResourceSelectorData, SharedResourceSelectorResponse, SharedGetBookmarkedContentData, SharedGetBookmarkedContentResponse, SharedToggleBookmarkData, SharedToggleBookmarkResponse, SharedGetImportantData, SharedGetImportantResponse, PublicGetOutlineData, PublicGetOutlineResponse, SearchSearchVideoContentData, SearchSearchVideoContentResponse, SearchSuggestVideoKeywordsData, SearchSuggestVideoKeywordsResponse, ChannelGetDisplaysData, ChannelGetDisplaysResponse, ChannelGetChannelByUsernameData, ChannelGetChannelByUsernameResponse, ChannelUpdateMyChannelData, ChannelUpdateMyChannelResponse, MemberGetDisplaysData, MemberGetDisplaysResponse, MemberUploadMemberXlsxData, MemberUploadMemberXlsxResponse, MemberDownloadMemberXlsxTemplateData, MemberDownloadMemberXlsxTemplateResponse, MemberCheckMemberData, MemberCheckMemberResponse, MemberCreateMemberData, MemberCreateMemberResponse, MemberUpdateMemberData, MemberUpdateMemberResponse, MemberDeleteMemberData, MemberDeleteMemberResponse, MemberCreateRosterData, MemberCreateRosterResponse, MemberUpdateRosterData, MemberUpdateRosterResponse, MemberDeleteRosterData, MemberDeleteRosterResponse, MemberInviteUserData, MemberInviteUserResponse, MessageGetMessagesData, MessageGetMessagesResponse, MessageSendMemberMessageData, MessageSendMemberMessageResponse, MessageReadMessageData, MessageReadMessageResponse, AssistantGetMessagesData, AssistantGetMessagesResponse, AssistantSendMessageData, AssistantSendMessageResponse, AssistantDeleteAllMessagesData, AssistantDeleteAllMessagesResponse, AssistantDeleteMessageData, AssistantDeleteMessageResponse, CertificateGetCourseCertificatesData, CertificateGetCourseCertificatesResponse, CertificateRequestCourseCertificateData, CertificateRequestCourseCertificateResponse, CertificateGetDisplaysData, CertificateGetDisplaysResponse, CertificateTemplateSelectorData, CertificateTemplateSelectorResponse, CertificateGetResourceData, CertificateGetResourceResponse, CertificateUpdateResourceData, CertificateUpdateResourceResponse, CertificateDeleteResourceData, CertificateDeleteResourceResponse, CertificateCreateResourceData, CertificateCreateResourceResponse, PublicVerifyCertificateData, PublicVerifyCertificateResponse, PublicHealthCheckResponse } from './types.gen';

/**
 * Create User
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const publicCreateUser = (data: PublicCreateUserData): CancelablePromise<PublicCreateUserResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/user',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Verify Email
 * @param data The data for the request.
 * @param data.token
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const publicVerifyEmail = (data: PublicVerifyEmailData): CancelablePromise<PublicVerifyEmailResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/user/verifyemail',
        query: {
            token: data.token
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Resend Verification Email
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const publicResendVerificationEmail = (data: PublicResendVerificationEmailData): CancelablePromise<PublicResendVerificationEmailResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/user/verifyemail',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Login
 * @param data The data for the request.
 * @param data.formData
 * @returns LoginResponse Successful Response
 * @throws ApiError
 */
export const publicLogin = (data: PublicLoginData): CancelablePromise<PublicLoginResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/login',
        formData: data.formData,
        mediaType: 'application/x-www-form-urlencoded',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Password Reset
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const publicPasswordReset = (data: PublicPasswordResetData): CancelablePromise<PublicPasswordResetResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/password/reset',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Password Reset Confirm
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const publicPasswordResetConfirm = (data: PublicPasswordResetConfirmData): CancelablePromise<PublicPasswordResetConfirmResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/password/reset',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Invitation Accept
 * @param data The data for the request.
 * @param data.requestBody
 * @returns UserResponse Successful Response
 * @throws ApiError
 */
export const publicInvitationAccept = (data: PublicInvitationAcceptData): CancelablePromise<PublicInvitationAcceptResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/invitation/accept',
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Me
 * @param data The data for the request.
 * @param data.accessToken
 * @param data.refreshToken
 * @returns UserResponse Successful Response
 * @throws ApiError
 */
export const accountGetMe = (data: AccountGetMeData = {}): CancelablePromise<AccountGetMeResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/account/user/me',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Update Me
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns UserResponse Successful Response
 * @throws ApiError
 */
export const accountUpdateMe = (data: AccountUpdateMeData): CancelablePromise<AccountUpdateMeResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/account/user/me',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get User
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns UserResponse Successful Response
 * @throws ApiError
 */
export const accountGetUser = (data: AccountGetUserData): CancelablePromise<AccountGetUserResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/account/user/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get User By Username
 * @param data The data for the request.
 * @param data.username
 * @param data.accessToken
 * @param data.refreshToken
 * @returns UserResponse Successful Response
 * @throws ApiError
 */
export const accountGetUserByUsername = (data: AccountGetUserByUsernameData): CancelablePromise<AccountGetUserByUsernameResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/account/user/{username}',
        path: {
            username: data.username
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Logout
 * @param data The data for the request.
 * @param data.refreshToken
 * @param data.accessToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const accountLogout = (data: AccountLogoutData = {}): CancelablePromise<AccountLogoutResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v2/account/login',
        cookies: {
            refresh_token: data.refreshToken,
            access_token: data.accessToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Upload Files
 * @param data The data for the request.
 * @param data.formData
 * @param data.accessToken
 * @param data.refreshToken
 * @returns string Successful Response
 * @throws ApiError
 */
export const accountUploadFiles = (data: AccountUploadFilesData): CancelablePromise<AccountUploadFilesResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/account/user/upload',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        formData: data.formData,
        mediaType: 'multipart/form-data',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Threads
 * @param data The data for the request.
 * @param data.search
 * @param data.orderBy
 * @param data.ownerId
 * @param data.commenterId
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_ThreadResponse_ Successful Response
 * @throws ApiError
 */
export const commentGetThreads = (data: CommentGetThreadsData = {}): CancelablePromise<CommentGetThreadsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/comment/thread',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            order_by: data.orderBy,
            owner_id: data.ownerId,
            commenter_id: data.commenterId,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Create Thread
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns ThreadResponse Successful Response
 * @throws ApiError
 */
export const commentCreateThread = (data: CommentCreateThreadData): CancelablePromise<CommentCreateThreadResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/comment/thread',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Update Thread
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const commentUpdateThread = (data: CommentUpdateThreadData): CancelablePromise<CommentUpdateThreadResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/comment/thread/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Create Resource
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns CommentResourceResponse Successful Response
 * @throws ApiError
 */
export const commentCreateResource = (data: CommentCreateResourceData): CancelablePromise<CommentCreateResourceResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/comment/comment',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Update Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns CommentResourceResponse Successful Response
 * @throws ApiError
 */
export const commentUpdateResource = (data: CommentUpdateResourceData): CancelablePromise<CommentUpdateResourceResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/comment/comment/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Toggle Action
 * @param data The data for the request.
 * @param data.id
 * @param data.action
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const commentToggleAction = (data: CommentToggleActionData): CancelablePromise<CommentToggleActionResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/comment/comment/{id}/{action}',
        path: {
            id: data.id,
            action: data.action
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Thread
 * @param data The data for the request.
 * @param data.url
 * @param data.ratingMode
 * @returns ThreadResponse Successful Response
 * @throws ApiError
 */
export const publicGetThread = (data: PublicGetThreadData): CancelablePromise<PublicGetThreadResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/thread/{url}',
        path: {
            url: data.url
        },
        query: {
            rating_mode: data.ratingMode
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Comments
 * @param data The data for the request.
 * @param data.page
 * @param data.size
 * @param data.userId
 * @param data.search
 * @param data.orderBy
 * @param data.threadId
 * @returns Paginated_CommentDisplayResponse_ Successful Response
 * @throws ApiError
 */
export const publicGetComments = (data: PublicGetCommentsData = {}): CancelablePromise<PublicGetCommentsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/comment/display',
        query: {
            page: data.page,
            size: data.size,
            user_id: data.userId,
            search: data.search,
            order_by: data.orderBy,
            thread_id: data.threadId
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Displays
 * @param data The data for the request.
 * @param data.search
 * @param data.owner
 * @param data.subKind
 * @param data.tag
 * @param data.playlistId
 * @param data.orderBy
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_VideoDisplayResponse_ Successful Response
 * @throws ApiError
 */
export const videoGetDisplays = (data: VideoGetDisplaysData = {}): CancelablePromise<VideoGetDisplaysResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/video/video/display',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            owner: data.owner,
            sub_kind: data.subKind,
            tag: data.tag,
            playlist_id: data.playlistId,
            order_by: data.orderBy,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Import Youtube Video
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns VideoDisplayResponse Successful Response
 * @throws ApiError
 */
export const videoImportYoutubeVideo = (data: VideoImportYoutubeVideoData): CancelablePromise<VideoImportYoutubeVideoResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/video/video/import/youtubevideo',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Tags
 * @param data The data for the request.
 * @param data.limit
 * @param data.accessToken
 * @param data.refreshToken
 * @returns string Successful Response
 * @throws ApiError
 */
export const videoGetTags = (data: VideoGetTagsData): CancelablePromise<VideoGetTagsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/video/video/tag',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            limit: data.limit
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get View
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns VideoViewResponse Successful Response
 * @throws ApiError
 */
export const videoGetView = (data: VideoGetViewData): CancelablePromise<VideoGetViewResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/video/video/{id}/view',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Subtitles
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns VideoSubtitleResponse Successful Response
 * @throws ApiError
 */
export const videoGetSubtitles = (data: VideoGetSubtitlesData): CancelablePromise<VideoGetSubtitlesResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/video/video/{id}/subtitles',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns VideoResourceResponse Successful Response
 * @throws ApiError
 */
export const videoGetResource = (data: VideoGetResourceData): CancelablePromise<VideoGetResourceResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/video/video/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Update Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns VideoResourceResponse Successful Response
 * @throws ApiError
 */
export const videoUpdateResource = (data: VideoUpdateResourceData): CancelablePromise<VideoUpdateResourceResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/video/video/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Delete Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const videoDeleteResource = (data: VideoDeleteResourceData): CancelablePromise<VideoDeleteResourceResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v2/video/video/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Watch Bitmap
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns binary Successful Response
 * @throws ApiError
 */
export const videoGetWatchBitmap = (data: VideoGetWatchBitmapData): CancelablePromise<VideoGetWatchBitmapResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/video/video/{id}/watch',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Start Watch
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const videoStartWatch = (data: VideoStartWatchData): CancelablePromise<VideoStartWatchResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/video/video/{id}/watch',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Update Watch
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const videoUpdateWatch = (data: VideoUpdateWatchData): CancelablePromise<VideoUpdateWatchResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/video/video/{id}/watch',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Delete Watch
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const videoDeleteWatch = (data: VideoDeleteWatchData): CancelablePromise<VideoDeleteWatchResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v2/video/video/{id}/watch',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Video Report
 * @param data The data for the request.
 * @param data.id
 * @param data.search
 * @param data.asOf
 * @param data.upTo
 * @param data.orderBy
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_VideoReportResponse_ Successful Response
 * @throws ApiError
 */
export const videoGetVideoReport = (data: VideoGetVideoReportData): CancelablePromise<VideoGetVideoReportResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/video/video/{id}/report',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            as_of: data.asOf,
            up_to: data.upTo,
            order_by: data.orderBy,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Download Video Report
 * @param data The data for the request.
 * @param data.id
 * @param data.search
 * @param data.asOf
 * @param data.upTo
 * @param data.orderBy
 * @param data.accessToken
 * @param data.refreshToken
 * @returns string Successful Response
 * @throws ApiError
 */
export const videoDownloadVideoReport = (data: VideoDownloadVideoReportData): CancelablePromise<VideoDownloadVideoReportResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/video/video/{id}/report/download',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            as_of: data.asOf,
            up_to: data.upTo,
            order_by: data.orderBy
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Toggle Action
 * @param data The data for the request.
 * @param data.id
 * @param data.action
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const videoToggleAction = (data: VideoToggleActionData): CancelablePromise<VideoToggleActionResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/video/video/{id}/{action}',
        path: {
            id: data.id,
            action: data.action
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Displays
 * @param data The data for the request.
 * @param data.search
 * @param data.owner
 * @param data.orderBy
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_PlaylistDisplayResponse_ Successful Response
 * @throws ApiError
 */
export const playlistGetDisplays = (data: PlaylistGetDisplaysData = {}): CancelablePromise<PlaylistGetDisplaysResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/video/playlist/display',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            owner: data.owner,
            order_by: data.orderBy,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Import Youtube Playlist
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns PlaylistDisplayResponse Successful Response
 * @throws ApiError
 */
export const playlistImportYoutubePlaylist = (data: PlaylistImportYoutubePlaylistData): CancelablePromise<PlaylistImportYoutubePlaylistResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/video/playlist/import/youtubeplaylist',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Update Playlist Videos
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const playlistUpdatePlaylistVideos = (data: PlaylistUpdatePlaylistVideosData): CancelablePromise<PlaylistUpdatePlaylistVideosResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/video/playlist/video',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get View
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns PlaylistViewResponse Successful Response
 * @throws ApiError
 */
export const playlistGetView = (data: PlaylistGetViewData): CancelablePromise<PlaylistGetViewResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/video/playlist/{id}/view',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Resume Playlist
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns PlaylistResumeResponse Successful Response
 * @throws ApiError
 */
export const playlistResumePlaylist = (data: PlaylistResumePlaylistData): CancelablePromise<PlaylistResumePlaylistResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/video/playlist/{id}/resume',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns PlaylistResourceResponse Successful Response
 * @throws ApiError
 */
export const playlistGetResource = (data: PlaylistGetResourceData): CancelablePromise<PlaylistGetResourceResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/video/playlist/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Update Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns PlaylistResourceResponse Successful Response
 * @throws ApiError
 */
export const playlistUpdateResource = (data: PlaylistUpdateResourceData): CancelablePromise<PlaylistUpdateResourceResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/video/playlist/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Delete Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const playlistDeleteResource = (data: PlaylistDeleteResourceData): CancelablePromise<PlaylistDeleteResourceResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v2/video/playlist/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Create Resource
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns PlaylistResourceResponse Successful Response
 * @throws ApiError
 */
export const playlistCreateResource = (data: PlaylistCreateResourceData): CancelablePromise<PlaylistCreateResourceResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/video/playlist',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Playlist Report
 * @param data The data for the request.
 * @param data.id
 * @param data.search
 * @param data.asOf
 * @param data.upTo
 * @param data.orderBy
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_PlaylistReportResponse_ Successful Response
 * @throws ApiError
 */
export const playlistGetPlaylistReport = (data: PlaylistGetPlaylistReportData): CancelablePromise<PlaylistGetPlaylistReportResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/video/playlist/{id}/report',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            as_of: data.asOf,
            up_to: data.upTo,
            order_by: data.orderBy,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Download Playlist Report
 * @param data The data for the request.
 * @param data.id
 * @param data.search
 * @param data.asOf
 * @param data.upTo
 * @param data.orderBy
 * @param data.accessToken
 * @param data.refreshToken
 * @returns string Successful Response
 * @throws ApiError
 */
export const playlistDownloadPlaylistReport = (data: PlaylistDownloadPlaylistReportData): CancelablePromise<PlaylistDownloadPlaylistReportResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/video/playlist/{id}/report/download',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            as_of: data.asOf,
            up_to: data.upTo,
            order_by: data.orderBy
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Check Video
 * @param data The data for the request.
 * @param data.videoId
 * @param data.search
 * @param data.orderBy
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_PlaylistCheckResponse_ Successful Response
 * @throws ApiError
 */
export const playlistCheckVideo = (data: PlaylistCheckVideoData): CancelablePromise<PlaylistCheckVideoResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/video/playlist/checkvideo/{video_id}',
        path: {
            video_id: data.videoId
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            order_by: data.orderBy,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Toggle Action
 * @param data The data for the request.
 * @param data.id
 * @param data.action
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const playlistToggleAction = (data: PlaylistToggleActionData): CancelablePromise<PlaylistToggleActionResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/video/playlist/{id}/{action}',
        path: {
            id: data.id,
            action: data.action
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Displays
 * @param data The data for the request.
 * @param data.search
 * @param data.owner
 * @param data.subKind
 * @param data.orderBy
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_AssetDisplayResponse_ Successful Response
 * @throws ApiError
 */
export const assetGetDisplays = (data: AssetGetDisplaysData = {}): CancelablePromise<AssetGetDisplaysResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/asset/asset/display',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            owner: data.owner,
            sub_kind: data.subKind,
            order_by: data.orderBy,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Display
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns AssetDisplayResponse Successful Response
 * @throws ApiError
 */
export const assetGetDisplay = (data: AssetGetDisplayData): CancelablePromise<AssetGetDisplayResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/asset/asset/display/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns AssetResourceResponse Successful Response
 * @throws ApiError
 */
export const assetGetResource = (data: AssetGetResourceData): CancelablePromise<AssetGetResourceResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/asset/asset/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Update Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns AssetResourceResponse Successful Response
 * @throws ApiError
 */
export const assetUpdateResource = (data: AssetUpdateResourceData): CancelablePromise<AssetUpdateResourceResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/asset/asset/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Delete Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const assetDeleteResource = (data: AssetDeleteResourceData): CancelablePromise<AssetDeleteResourceResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v2/asset/asset/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Create Resource
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns AssetResourceResponse Successful Response
 * @throws ApiError
 */
export const assetCreateResource = (data: AssetCreateResourceData): CancelablePromise<AssetCreateResourceResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/asset/asset',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Watch Bitmap
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns binary Successful Response
 * @throws ApiError
 */
export const assetGetWatchBitmap = (data: AssetGetWatchBitmapData): CancelablePromise<AssetGetWatchBitmapResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/asset/asset/{id}/watch',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Start Watch
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const assetStartWatch = (data: AssetStartWatchData): CancelablePromise<AssetStartWatchResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/asset/asset/{id}/watch',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Update Watch
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const assetUpdateWatch = (data: AssetUpdateWatchData): CancelablePromise<AssetUpdateWatchResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/asset/asset/{id}/watch',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Delete Watch
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const assetDeleteWatch = (data: AssetDeleteWatchData): CancelablePromise<AssetDeleteWatchResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v2/asset/asset/{id}/watch',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Asset Report
 * @param data The data for the request.
 * @param data.id
 * @param data.search
 * @param data.asOf
 * @param data.upTo
 * @param data.orderBy
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_AssetReportResponse_ Successful Response
 * @throws ApiError
 */
export const assetGetAssetReport = (data: AssetGetAssetReportData): CancelablePromise<AssetGetAssetReportResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/asset/asset/{id}/report',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            as_of: data.asOf,
            up_to: data.upTo,
            order_by: data.orderBy,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Download Asset Report
 * @param data The data for the request.
 * @param data.id
 * @param data.search
 * @param data.asOf
 * @param data.upTo
 * @param data.orderBy
 * @param data.accessToken
 * @param data.refreshToken
 * @returns string Successful Response
 * @throws ApiError
 */
export const assetDownloadAssetReport = (data: AssetDownloadAssetReportData): CancelablePromise<AssetDownloadAssetReportResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/asset/asset/{id}/report/download',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            as_of: data.asOf,
            up_to: data.upTo,
            order_by: data.orderBy
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Toggle Action
 * @param data The data for the request.
 * @param data.id
 * @param data.action
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const assetToggleAction = (data: AssetToggleActionData): CancelablePromise<AssetToggleActionResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/asset/asset/{id}/{action}',
        path: {
            id: data.id,
            action: data.action
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Presigned Upload Url
 * @param data The data for the request.
 * @param data.assetId
 * @param data.filename
 * @param data.contentType
 * @param data.accessToken
 * @param data.refreshToken
 * @returns string Successful Response
 * @throws ApiError
 */
export const assetPresignedUploadUrl = (data: AssetPresignedUploadUrlData): CancelablePromise<AssetPresignedUploadUrlResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/asset/presigned-upload-url',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            asset_id: data.assetId,
            filename: data.filename,
            content_type: data.contentType
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Html View
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns string Successful Response
 * @throws ApiError
 */
export const assetHtmlView = (data: AssetHtmlViewData): CancelablePromise<AssetHtmlViewResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/asset/html/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Pdf View
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns string Successful Response
 * @throws ApiError
 */
export const assetPdfView = (data: AssetPdfViewData): CancelablePromise<AssetPdfViewResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/asset/pdf/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Displays
 * @param data The data for the request.
 * @param data.search
 * @param data.owner
 * @param data.orderBy
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_QuizDisplayResponse_ Successful Response
 * @throws ApiError
 */
export const quizGetDisplays = (data: QuizGetDisplaysData = {}): CancelablePromise<QuizGetDisplaysResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/quiz/quiz/display',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            owner: data.owner,
            order_by: data.orderBy,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns QuizResourceResponse Successful Response
 * @throws ApiError
 */
export const quizGetResource = (data: QuizGetResourceData): CancelablePromise<QuizGetResourceResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/quiz/quiz/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Update Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns QuizResourceResponse Successful Response
 * @throws ApiError
 */
export const quizUpdateResource = (data: QuizUpdateResourceData): CancelablePromise<QuizUpdateResourceResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/quiz/quiz/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Delete Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const quizDeleteResource = (data: QuizDeleteResourceData): CancelablePromise<QuizDeleteResourceResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v2/quiz/quiz/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Create Resource
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns QuizResourceResponse Successful Response
 * @throws ApiError
 */
export const quizCreateResource = (data: QuizCreateResourceData): CancelablePromise<QuizCreateResourceResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/quiz/quiz',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Attempt
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns QuizAttemptResponse Successful Response
 * @throws ApiError
 */
export const quizGetAttempt = (data: QuizGetAttemptData): CancelablePromise<QuizGetAttemptResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/quiz/quiz/{id}/attempt',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Ready Attempt
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns QuizAttemptResponse Successful Response
 * @throws ApiError
 */
export const quizReadyAttempt = (data: QuizReadyAttemptData): CancelablePromise<QuizReadyAttemptResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/quiz/quiz/{id}/attempt',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Submit Attempt
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns QuizAttemptResponse Successful Response
 * @throws ApiError
 */
export const quizSubmitAttempt = (data: QuizSubmitAttemptData): CancelablePromise<QuizSubmitAttemptResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/quiz/quiz/{id}/attempt',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Delete Attempt
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const quizDeleteAttempt = (data: QuizDeleteAttemptData): CancelablePromise<QuizDeleteAttemptResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v2/quiz/quiz/{id}/attempt',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Quiz Report
 * @param data The data for the request.
 * @param data.id
 * @param data.search
 * @param data.asOf
 * @param data.upTo
 * @param data.orderBy
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_QuizReportResponse_ Successful Response
 * @throws ApiError
 */
export const quizGetQuizReport = (data: QuizGetQuizReportData): CancelablePromise<QuizGetQuizReportResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/quiz/quiz/{id}/report',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            as_of: data.asOf,
            up_to: data.upTo,
            order_by: data.orderBy,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Download Quiz Report
 * @param data The data for the request.
 * @param data.id
 * @param data.search
 * @param data.asOf
 * @param data.upTo
 * @param data.orderBy
 * @param data.accessToken
 * @param data.refreshToken
 * @returns string Successful Response
 * @throws ApiError
 */
export const quizDownloadQuizReport = (data: QuizDownloadQuizReportData): CancelablePromise<QuizDownloadQuizReportResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/quiz/quiz/{id}/report/download',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            as_of: data.asOf,
            up_to: data.upTo,
            order_by: data.orderBy
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Toggle Action
 * @param data The data for the request.
 * @param data.id
 * @param data.action
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const quizToggleAction = (data: QuizToggleActionData): CancelablePromise<QuizToggleActionResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/quiz/quiz/{id}/{action}',
        path: {
            id: data.id,
            action: data.action
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Owned Questions
 * @param data The data for the request.
 * @param data.accessToken
 * @param data.refreshToken
 * @returns QuizResourceQuestionResource Successful Response
 * @throws ApiError
 */
export const quizGetOwnedQuestions = (data: QuizGetOwnedQuestionsData = {}): CancelablePromise<QuizGetOwnedQuestionsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/quiz/question',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Displays
 * @param data The data for the request.
 * @param data.search
 * @param data.owner
 * @param data.orderBy
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_SurveyDisplayResponse_ Successful Response
 * @throws ApiError
 */
export const surveyGetDisplays = (data: SurveyGetDisplaysData = {}): CancelablePromise<SurveyGetDisplaysResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/survey/survey/display',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            owner: data.owner,
            order_by: data.orderBy,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns SurveyResourceResponse Successful Response
 * @throws ApiError
 */
export const surveyGetResource = (data: SurveyGetResourceData): CancelablePromise<SurveyGetResourceResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/survey/survey/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Update Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns SurveyResourceResponse Successful Response
 * @throws ApiError
 */
export const surveyUpdateResource = (data: SurveyUpdateResourceData): CancelablePromise<SurveyUpdateResourceResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/survey/survey/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Delete Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const surveyDeleteResource = (data: SurveyDeleteResourceData): CancelablePromise<SurveyDeleteResourceResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v2/survey/survey/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Create Resource
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns SurveyResourceResponse Successful Response
 * @throws ApiError
 */
export const surveyCreateResource = (data: SurveyCreateResourceData): CancelablePromise<SurveyCreateResourceResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/survey/survey',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Attempt
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns SurveyAttemptResponse Successful Response
 * @throws ApiError
 */
export const surveyGetAttempt = (data: SurveyGetAttemptData): CancelablePromise<SurveyGetAttemptResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/survey/survey/{id}/attempt',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Ready Attempt
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns SurveyAttemptResponse Successful Response
 * @throws ApiError
 */
export const surveyReadyAttempt = (data: SurveyReadyAttemptData): CancelablePromise<SurveyReadyAttemptResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/survey/survey/{id}/attempt',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Submit Attempt
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns SurveyAttemptResponse Successful Response
 * @throws ApiError
 */
export const surveySubmitAttempt = (data: SurveySubmitAttemptData): CancelablePromise<SurveySubmitAttemptResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/survey/survey/{id}/attempt',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Delete Attempt
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const surveyDeleteAttempt = (data: SurveyDeleteAttemptData): CancelablePromise<SurveyDeleteAttemptResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v2/survey/survey/{id}/attempt',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Survey Report
 * @param data The data for the request.
 * @param data.id
 * @param data.search
 * @param data.asOf
 * @param data.upTo
 * @param data.orderBy
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_SurveyReportResponse_ Successful Response
 * @throws ApiError
 */
export const surveyGetSurveyReport = (data: SurveyGetSurveyReportData): CancelablePromise<SurveyGetSurveyReportResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/survey/survey/{id}/report',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            as_of: data.asOf,
            up_to: data.upTo,
            order_by: data.orderBy,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Download Survey Report
 * @param data The data for the request.
 * @param data.id
 * @param data.search
 * @param data.asOf
 * @param data.upTo
 * @param data.orderBy
 * @param data.accessToken
 * @param data.refreshToken
 * @returns string Successful Response
 * @throws ApiError
 */
export const surveyDownloadSurveyReport = (data: SurveyDownloadSurveyReportData): CancelablePromise<SurveyDownloadSurveyReportResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/survey/survey/{id}/report/download',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            as_of: data.asOf,
            up_to: data.upTo,
            order_by: data.orderBy
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Toggle Action
 * @param data The data for the request.
 * @param data.id
 * @param data.action
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const surveyToggleAction = (data: SurveyToggleActionData): CancelablePromise<SurveyToggleActionResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/survey/survey/{id}/{action}',
        path: {
            id: data.id,
            action: data.action
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Owned Questions
 * @param data The data for the request.
 * @param data.accessToken
 * @param data.refreshToken
 * @returns SurveyResourceQuestionResource Successful Response
 * @throws ApiError
 */
export const surveyGetOwnedQuestions = (data: SurveyGetOwnedQuestionsData = {}): CancelablePromise<SurveyGetOwnedQuestionsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/survey/question',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Displays
 * @param data The data for the request.
 * @param data.search
 * @param data.owner
 * @param data.orderBy
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_ExamDisplayResponse_ Successful Response
 * @throws ApiError
 */
export const examGetDisplays = (data: ExamGetDisplaysData = {}): CancelablePromise<ExamGetDisplaysResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/exam/exam/display',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            owner: data.owner,
            order_by: data.orderBy,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns ExamResourceResponse Successful Response
 * @throws ApiError
 */
export const examGetResource = (data: ExamGetResourceData): CancelablePromise<ExamGetResourceResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/exam/exam/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Update Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns ExamResourceResponse Successful Response
 * @throws ApiError
 */
export const examUpdateResource = (data: ExamUpdateResourceData): CancelablePromise<ExamUpdateResourceResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/exam/exam/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Delete Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const examDeleteResource = (data: ExamDeleteResourceData): CancelablePromise<ExamDeleteResourceResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v2/exam/exam/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Create Resource
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns ExamResourceResponse Successful Response
 * @throws ApiError
 */
export const examCreateResource = (data: ExamCreateResourceData): CancelablePromise<ExamCreateResourceResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/exam/exam',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Attempt
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns ExamAttemptResponse Successful Response
 * @throws ApiError
 */
export const examGetAttempt = (data: ExamGetAttemptData): CancelablePromise<ExamGetAttemptResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/exam/exam/{id}/attempt',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            409: '다른 시험이 진행 중입니다.',
            422: 'Validation Error'
        }
    });
};

/**
 * Ready Attempt
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns ExamAttemptResponse Successful Response
 * @throws ApiError
 */
export const examReadyAttempt = (data: ExamReadyAttemptData): CancelablePromise<ExamReadyAttemptResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/exam/exam/{id}/attempt',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Start Attempt
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns ExamAttemptResponse Successful Response
 * @throws ApiError
 */
export const examStartAttempt = (data: ExamStartAttemptData): CancelablePromise<ExamStartAttemptResponse> => {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/api/v2/exam/exam/{id}/attempt',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Submit Attempt
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns ExamAttemptResponse Successful Response
 * @throws ApiError
 */
export const examSubmitAttempt = (data: ExamSubmitAttemptData): CancelablePromise<ExamSubmitAttemptResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/exam/exam/{id}/attempt',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Delete Attempt
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const examDeleteAttempt = (data: ExamDeleteAttemptData): CancelablePromise<ExamDeleteAttemptResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v2/exam/exam/{id}/attempt',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Grading
 * @param data The data for the request.
 * @param data.id
 * @param data.userId
 * @param data.accessToken
 * @param data.refreshToken
 * @returns ExamAttemptResponse Successful Response
 * @throws ApiError
 */
export const examGetGrading = (data: ExamGetGradingData): CancelablePromise<ExamGetGradingResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/exam/exam/{id}/grading/{user_id}',
        path: {
            id: data.id,
            user_id: data.userId
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Submit Grading
 * @param data The data for the request.
 * @param data.id
 * @param data.userId
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns ExamAttemptResponse Successful Response
 * @throws ApiError
 */
export const examSubmitGrading = (data: ExamSubmitGradingData): CancelablePromise<ExamSubmitGradingResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/exam/exam/{id}/grading/{user_id}',
        path: {
            id: data.id,
            user_id: data.userId
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Exam Report
 * @param data The data for the request.
 * @param data.id
 * @param data.search
 * @param data.asOf
 * @param data.upTo
 * @param data.orderBy
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_ExamReportResponse_ Successful Response
 * @throws ApiError
 */
export const examGetExamReport = (data: ExamGetExamReportData): CancelablePromise<ExamGetExamReportResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/exam/exam/{id}/report',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            as_of: data.asOf,
            up_to: data.upTo,
            order_by: data.orderBy,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Download Exam Report
 * @param data The data for the request.
 * @param data.id
 * @param data.search
 * @param data.asOf
 * @param data.upTo
 * @param data.orderBy
 * @param data.accessToken
 * @param data.refreshToken
 * @returns string Successful Response
 * @throws ApiError
 */
export const examDownloadExamReport = (data: ExamDownloadExamReportData): CancelablePromise<ExamDownloadExamReportResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/exam/exam/{id}/report/download',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            as_of: data.asOf,
            up_to: data.upTo,
            order_by: data.orderBy
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Grading Submissions
 * Retrieve a paginated list of grading submissions.<br>The 'id' field in the response is a temporary ID for the frontend formatted as '{exam_id}:{user_id}'.
 * @param data The data for the request.
 * @param data.search
 * @param data.orderBy
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_ExamGradingSubmissionReponse_ Successful Response
 * @throws ApiError
 */
export const examGetGradingSubmissions = (data: ExamGetGradingSubmissionsData = {}): CancelablePromise<ExamGetGradingSubmissionsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/exam/submission',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            order_by: data.orderBy,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Toggle Action
 * @param data The data for the request.
 * @param data.id
 * @param data.action
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const examToggleAction = (data: ExamToggleActionData): CancelablePromise<ExamToggleActionResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/exam/exam/{id}/{action}',
        path: {
            id: data.id,
            action: data.action
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Owned Questions
 * @param data The data for the request.
 * @param data.accessToken
 * @param data.refreshToken
 * @returns ExamResourceQuestionResource Successful Response
 * @throws ApiError
 */
export const examGetOwnedQuestions = (data: ExamGetOwnedQuestionsData = {}): CancelablePromise<ExamGetOwnedQuestionsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/exam/question',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Displays
 * Retrieve paginated lesson displays.
 *
 * When a course filter is provided:
 * - Page size is automatically set to 100 items
 * - Lesson weights are included in the response
 *
 * Without a course filter:
 * - Uses the requested page size from pagination parameters
 * - Regular lesson display information is returned
 * @param data The data for the request.
 * @param data.search
 * @param data.course
 * @param data.owner
 * @param data.orderBy
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_LessonDisplayResponse_ Successful Response
 * @throws ApiError
 */
export const lessonGetDisplays = (data: LessonGetDisplaysData = {}): CancelablePromise<LessonGetDisplaysResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/lesson/lesson/display',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            course: data.course,
            owner: data.owner,
            order_by: data.orderBy,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Display
 * "
 * Special endpoint to retrieve a single lesson display.
 * This endpoint ignores the hide_from_list option to show the specific lesson.
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns LessonDisplayResponse Successful Response
 * @throws ApiError
 */
export const lessonGetDisplay = (data: LessonGetDisplayData): CancelablePromise<LessonGetDisplayResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/lesson/lesson/display/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns LessonResourceResponse Successful Response
 * @throws ApiError
 */
export const lessonGetResource = (data: LessonGetResourceData): CancelablePromise<LessonGetResourceResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/lesson/lesson/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Update Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns LessonResourceResponse Successful Response
 * @throws ApiError
 */
export const lessonUpdateResource = (data: LessonUpdateResourceData): CancelablePromise<LessonUpdateResourceResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/lesson/lesson/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Delete Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const lessonDeleteResource = (data: LessonDeleteResourceData): CancelablePromise<LessonDeleteResourceResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v2/lesson/lesson/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Create Resource
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns LessonResourceResponse Successful Response
 * @throws ApiError
 */
export const lessonCreateResource = (data: LessonCreateResourceData): CancelablePromise<LessonCreateResourceResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/lesson/lesson',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Toggle Action
 * @param data The data for the request.
 * @param data.id
 * @param data.action
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const lessonToggleAction = (data: LessonToggleActionData): CancelablePromise<LessonToggleActionResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/lesson/lesson/{id}/{action}',
        path: {
            id: data.id,
            action: data.action
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Displays
 * @param data The data for the request.
 * @param data.search
 * @param data.owner
 * @param data.orderBy
 * @param data.enrolled
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_CourseDisplayResponse_ Successful Response
 * @throws ApiError
 */
export const courseGetDisplays = (data: CourseGetDisplaysData = {}): CancelablePromise<CourseGetDisplaysResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/course/course/display',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            owner: data.owner,
            order_by: data.orderBy,
            enrolled: data.enrolled,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns CourseResourceResponse Successful Response
 * @throws ApiError
 */
export const courseGetResource = (data: CourseGetResourceData): CancelablePromise<CourseGetResourceResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/course/course/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Update Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns CourseResourceResponse Successful Response
 * @throws ApiError
 */
export const courseUpdateResource = (data: CourseUpdateResourceData): CancelablePromise<CourseUpdateResourceResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/course/course/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Delete Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const courseDeleteResource = (data: CourseDeleteResourceData): CancelablePromise<CourseDeleteResourceResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v2/course/course/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Create Resource
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns CourseResourceResponse Successful Response
 * @throws ApiError
 */
export const courseCreateResource = (data: CourseCreateResourceData): CancelablePromise<CourseCreateResourceResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/course/course',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get View
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns CourseDisplayResponse Successful Response
 * @throws ApiError
 */
export const courseGetView = (data: CourseGetViewData): CancelablePromise<CourseGetViewResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/course/course/{id}/view',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Enroll
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns CourseEnrollResponse Successful Response
 * @throws ApiError
 */
export const courseEnroll = (data: CourseEnrollData): CancelablePromise<CourseEnrollResponse2> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/course/course/{id}/enroll',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Unenroll
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const courseUnenroll = (data: CourseUnenrollData): CancelablePromise<CourseUnenrollResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v2/course/course/{id}/enroll',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Update Learning
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const courseUpdateLearning = (data: CourseUpdateLearningData): CancelablePromise<CourseUpdateLearningResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/course/course/{id}/learning',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Course Report
 * @param data The data for the request.
 * @param data.id
 * @param data.search
 * @param data.asOf
 * @param data.upTo
 * @param data.orderBy
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_CourseReportResponse_ Successful Response
 * @throws ApiError
 */
export const courseGetCourseReport = (data: CourseGetCourseReportData): CancelablePromise<CourseGetCourseReportResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/course/course/{id}/report',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            as_of: data.asOf,
            up_to: data.upTo,
            order_by: data.orderBy,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Download Course Report
 * @param data The data for the request.
 * @param data.id
 * @param data.search
 * @param data.asOf
 * @param data.upTo
 * @param data.orderBy
 * @param data.accessToken
 * @param data.refreshToken
 * @returns string Successful Response
 * @throws ApiError
 */
export const courseDownloadCourseReport = (data: CourseDownloadCourseReportData): CancelablePromise<CourseDownloadCourseReportResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/course/course/{id}/report/download',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            as_of: data.asOf,
            up_to: data.upTo,
            order_by: data.orderBy
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Toggle Action
 * @param data The data for the request.
 * @param data.id
 * @param data.action
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const courseToggleAction = (data: CourseToggleActionData): CancelablePromise<CourseToggleActionResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/course/course/{id}/{action}',
        path: {
            id: data.id,
            action: data.action
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Create Esimsa Course
 * @param data The data for the request.
 * @param data.formData
 * @param data.accessToken
 * @param data.refreshToken
 * @returns CourseDisplayResponse Successful Response
 * @throws ApiError
 */
export const courseCreateEsimsaCourse = (data: CourseCreateEsimsaCourseData): CancelablePromise<CourseCreateEsimsaCourseResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/course/esimsacourse',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        formData: data.formData,
        mediaType: 'multipart/form-data',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Displays
 * @param data The data for the request.
 * @param data.kinds
 * @param data.excludes
 * @param data.search
 * @param data.orderBy
 * @param data._public
 * @param data.filter
 * @param data.channelOwner
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_Union_VideoDisplayResponse__PlaylistDisplayResponse__AssetDisplayResponse__QuizDisplayResponse__SurveyDisplayResponse__ExamDisplayResponse__CourseDisplayResponse__ Successful Response
 * @throws ApiError
 */
export const sharedGetDisplays = (data: SharedGetDisplaysData = {}): CancelablePromise<SharedGetDisplaysResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/shared/display',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            kinds: data.kinds,
            excludes: data.excludes,
            search: data.search,
            order_by: data.orderBy,
            public: data._public,
            filter: data.filter,
            channel_owner: data.channelOwner,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Resource Selector
 * @param data The data for the request.
 * @param data.kinds
 * @param data.excludes
 * @param data._public
 * @param data.accessToken
 * @param data.refreshToken
 * @returns ResourceSchema Successful Response
 * @throws ApiError
 */
export const sharedResourceSelector = (data: SharedResourceSelectorData = {}): CancelablePromise<SharedResourceSelectorResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/shared/resource',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            kinds: data.kinds,
            excludes: data.excludes,
            public: data._public
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Bookmarked Content
 * @param data The data for the request.
 * @param data.search
 * @param data.orderBy
 * @param data.kind
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_BookmarkedContentResponse_ Successful Response
 * @throws ApiError
 */
export const sharedGetBookmarkedContent = (data: SharedGetBookmarkedContentData = {}): CancelablePromise<SharedGetBookmarkedContentResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/shared/u/bookmarked',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            order_by: data.orderBy,
            kind: data.kind,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Toggle Bookmark
 * @param data The data for the request.
 * @param data.kind
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const sharedToggleBookmark = (data: SharedToggleBookmarkData): CancelablePromise<SharedToggleBookmarkResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/shared/u/{kind}/{id}/togglebookmark',
        path: {
            kind: data.kind,
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Important
 * @param data The data for the request.
 * @param data.accessToken
 * @param data.refreshToken
 * @returns ImportantResponse Successful Response
 * @throws ApiError
 */
export const sharedGetImportant = (data: SharedGetImportantData = {}): CancelablePromise<SharedGetImportantResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/shared/u/important',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Outline
 * @param data The data for the request.
 * @param data.id
 * @param data.userId
 * @returns CourseOutlineReponse Successful Response
 * @throws ApiError
 */
export const publicGetOutline = (data: PublicGetOutlineData): CancelablePromise<PublicGetOutlineResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/course/{id}/outline',
        path: {
            id: data.id
        },
        query: {
            user_id: data.userId
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Search Video Content
 * @param data The data for the request.
 * @param data.q
 * @param data.orderBy
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_VideoSearchResultResponse_ Successful Response
 * @throws ApiError
 */
export const searchSearchVideoContent = (data: SearchSearchVideoContentData): CancelablePromise<SearchSearchVideoContentResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/search/videocontent',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            q: data.q,
            order_by: data.orderBy,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Suggest Video Keywords
 * @param data The data for the request.
 * @param data.q
 * @param data.accessToken
 * @param data.refreshToken
 * @returns string Successful Response
 * @throws ApiError
 */
export const searchSuggestVideoKeywords = (data: SearchSuggestVideoKeywordsData = {}): CancelablePromise<SearchSuggestVideoKeywordsResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/search/videosuggestion',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            q: data.q
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Displays
 * @param data The data for the request.
 * @param data.search
 * @param data.orderBy
 * @param data.joined
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_ChannelDisplayResponse_ Successful Response
 * @throws ApiError
 */
export const channelGetDisplays = (data: ChannelGetDisplaysData = {}): CancelablePromise<ChannelGetDisplaysResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/channel/channel/display',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            order_by: data.orderBy,
            joined: data.joined,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Channel By Username
 * @param data The data for the request.
 * @param data.username
 * @param data.accessToken
 * @param data.refreshToken
 * @returns ChannelDisplayResponse Successful Response
 * @throws ApiError
 */
export const channelGetChannelByUsername = (data: ChannelGetChannelByUsernameData): CancelablePromise<ChannelGetChannelByUsernameResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/channel/channel/{username}',
        path: {
            username: data.username
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Update My Channel
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns ChannelUpdateResponse Successful Response
 * @throws ApiError
 */
export const channelUpdateMyChannel = (data: ChannelUpdateMyChannelData): CancelablePromise<ChannelUpdateMyChannelResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/channel/channel',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Displays
 * @param data The data for the request.
 * @param data.page
 * @param data.size
 * @param data.search
 * @param data.orderBy
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_MemberDisplayResponse_ Successful Response
 * @throws ApiError
 */
export const memberGetDisplays = (data: MemberGetDisplaysData = {}): CancelablePromise<MemberGetDisplaysResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/channel/member/display',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            page: data.page,
            size: data.size,
            search: data.search,
            order_by: data.orderBy
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Upload Member Xlsx
 * @param data The data for the request.
 * @param data.invitationUrl
 * @param data.formData
 * @param data.commit
 * @param data.invite
 * @param data.accessToken
 * @param data.refreshToken
 * @returns MemberXlsxResponse Successful Response
 * @throws ApiError
 */
export const memberUploadMemberXlsx = (data: MemberUploadMemberXlsxData): CancelablePromise<MemberUploadMemberXlsxResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/channel/member/xlsx',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            invitation_url: data.invitationUrl,
            commit: data.commit,
            invite: data.invite
        },
        formData: data.formData,
        mediaType: 'multipart/form-data',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Download Member Xlsx Template
 * @param data The data for the request.
 * @param data.accessToken
 * @param data.refreshToken
 * @returns string Successful Response
 * @throws ApiError
 */
export const memberDownloadMemberXlsxTemplate = (data: MemberDownloadMemberXlsxTemplateData = {}): CancelablePromise<MemberDownloadMemberXlsxTemplateResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/channel/member/xlsx/template',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Check Member
 * @param data The data for the request.
 * @param data.username
 * @param data.accessToken
 * @param data.refreshToken
 * @returns UserResponse Successful Response
 * @throws ApiError
 */
export const memberCheckMember = (data: MemberCheckMemberData): CancelablePromise<MemberCheckMemberResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/channel/member/{username}/check',
        path: {
            username: data.username
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Create Member
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns MemberDisplayResponse Successful Response
 * @throws ApiError
 */
export const memberCreateMember = (data: MemberCreateMemberData): CancelablePromise<MemberCreateMemberResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/channel/member',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Update Member
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const memberUpdateMember = (data: MemberUpdateMemberData): CancelablePromise<MemberUpdateMemberResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/channel/member/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Delete Member
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns null Successful Response
 * @throws ApiError
 */
export const memberDeleteMember = (data: MemberDeleteMemberData): CancelablePromise<MemberDeleteMemberResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v2/channel/member/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Create Roster
 * @param data The data for the request.
 * @param data.invitationUrl
 * @param data.requestBody
 * @param data.invite
 * @param data.accessToken
 * @param data.refreshToken
 * @returns MemberDisplayResponse Successful Response
 * @throws ApiError
 */
export const memberCreateRoster = (data: MemberCreateRosterData): CancelablePromise<MemberCreateRosterResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/channel/roster',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            invitation_url: data.invitationUrl,
            invite: data.invite
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Update Roster
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const memberUpdateRoster = (data: MemberUpdateRosterData): CancelablePromise<MemberUpdateRosterResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/channel/roster/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Delete Roster
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const memberDeleteRoster = (data: MemberDeleteRosterData): CancelablePromise<MemberDeleteRosterResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v2/channel/roster/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Invite User
 * @param data The data for the request.
 * @param data.username
 * @param data.invitationUrl
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const memberInviteUser = (data: MemberInviteUserData): CancelablePromise<MemberInviteUserResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/channel/invitation/{username}',
        path: {
            username: data.username
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            invitation_url: data.invitationUrl
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Messages
 * @param data The data for the request.
 * @param data.search
 * @param data.receiverId
 * @param data.senderId
 * @param data.orderBy
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_UserMessageResponse_ Successful Response
 * @throws ApiError
 */
export const messageGetMessages = (data: MessageGetMessagesData = {}): CancelablePromise<MessageGetMessagesResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/message/message',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            receiver_id: data.receiverId,
            sender_id: data.senderId,
            order_by: data.orderBy,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Send Member Message
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const messageSendMemberMessage = (data: MessageSendMemberMessageData): CancelablePromise<MessageSendMemberMessageResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/message/messages',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Read Message
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const messageReadMessage = (data: MessageReadMessageData): CancelablePromise<MessageReadMessageResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/message/messages',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Messages
 * @param data The data for the request.
 * @param data.search
 * @param data.role
 * @param data.orderBy
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_MessageResponse_ Successful Response
 * @throws ApiError
 */
export const assistantGetMessages = (data: AssistantGetMessagesData = {}): CancelablePromise<AssistantGetMessagesResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/assistant/message',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            role: data.role,
            order_by: data.orderBy,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Send Message
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns MessageResponse Successful Response
 * @throws ApiError
 */
export const assistantSendMessage = (data: AssistantSendMessageData): CancelablePromise<AssistantSendMessageResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/assistant/message',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Delete All Messages
 * @param data The data for the request.
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const assistantDeleteAllMessages = (data: AssistantDeleteAllMessagesData = {}): CancelablePromise<AssistantDeleteAllMessagesResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v2/assistant/message/all',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Delete Message
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const assistantDeleteMessage = (data: AssistantDeleteMessageData): CancelablePromise<AssistantDeleteMessageResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v2/assistant/message/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Course Certificates
 * @param data The data for the request.
 * @param data.courseId
 * @param data.accessToken
 * @param data.refreshToken
 * @returns CertificateResponse Successful Response
 * @throws ApiError
 */
export const certificateGetCourseCertificates = (data: CertificateGetCourseCertificatesData): CancelablePromise<CertificateGetCourseCertificatesResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/certificate/course/{course_id}',
        path: {
            course_id: data.courseId
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Request Course Certificate
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const certificateRequestCourseCertificate = (data: CertificateRequestCourseCertificateData): CancelablePromise<CertificateRequestCourseCertificateResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/certificate/course',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Displays
 * @param data The data for the request.
 * @param data.search
 * @param data.owner
 * @param data.orderBy
 * @param data.page
 * @param data.size
 * @param data.accessToken
 * @param data.refreshToken
 * @returns Paginated_TemplateDisplayResponse_ Successful Response
 * @throws ApiError
 */
export const certificateGetDisplays = (data: CertificateGetDisplaysData = {}): CancelablePromise<CertificateGetDisplaysResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/certificate/template/display',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        query: {
            search: data.search,
            owner: data.owner,
            order_by: data.orderBy,
            page: data.page,
            size: data.size
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Template Selector
 * @param data The data for the request.
 * @param data.accessToken
 * @param data.refreshToken
 * @returns TemplateSelectorResponse Successful Response
 * @throws ApiError
 */
export const certificateTemplateSelector = (data: CertificateTemplateSelectorData = {}): CancelablePromise<CertificateTemplateSelectorResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/certificate/template/selector',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Get Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns TemplateResourceResponse Successful Response
 * @throws ApiError
 */
export const certificateGetResource = (data: CertificateGetResourceData): CancelablePromise<CertificateGetResourceResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/certificate/template/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Update Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns TemplateResourceResponse Successful Response
 * @throws ApiError
 */
export const certificateUpdateResource = (data: CertificateUpdateResourceData): CancelablePromise<CertificateUpdateResourceResponse> => {
    return __request(OpenAPI, {
        method: 'PATCH',
        url: '/api/v2/certificate/template/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Delete Resource
 * @param data The data for the request.
 * @param data.id
 * @param data.accessToken
 * @param data.refreshToken
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const certificateDeleteResource = (data: CertificateDeleteResourceData): CancelablePromise<CertificateDeleteResourceResponse> => {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/api/v2/certificate/template/{id}',
        path: {
            id: data.id
        },
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Create Resource
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.accessToken
 * @param data.refreshToken
 * @returns TemplateResourceResponse Successful Response
 * @throws ApiError
 */
export const certificateCreateResource = (data: CertificateCreateResourceData): CancelablePromise<CertificateCreateResourceResponse> => {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v2/certificate/template',
        cookies: {
            access_token: data.accessToken,
            refresh_token: data.refreshToken
        },
        body: data.requestBody,
        mediaType: 'application/json',
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Verify Certificate
 * @param data The data for the request.
 * @param data.id
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const publicVerifyCertificate = (data: PublicVerifyCertificateData): CancelablePromise<PublicVerifyCertificateResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v2/certificate/verify',
        query: {
            id: data.id
        },
        errors: {
            422: 'Validation Error'
        }
    });
};

/**
 * Health Check
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const publicHealthCheck = (): CancelablePromise<PublicHealthCheckResponse> => {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/health'
    });
};