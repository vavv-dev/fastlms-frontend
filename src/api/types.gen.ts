// This file is auto-generated by @hey-api/openapi-ts

export type AssetDisplayResponse = {
    id: string;
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    owner: AssetOwner;
    thumbnail: string;
    sub_kind: AssetKind;
    entrypoint: string;
    url: string;
    uploaded: boolean;
    duration: number;
    cutoff_progress: number;
    score: (number | null);
    progress: (number | null);
    last_location: (string | null);
    passed: (boolean | null);
    last_position: (number | null);
    modified: string;
    kind: LearningResourceKind;
    grading_method: GradingMethodEnum;
    bookmark_count: number;
    like_count: number;
    flag_count: number;
    bookmarked: boolean;
    liked: boolean;
    flagged: boolean;
};

export type AssetKind = 'html' | 'pdf' | 'pptx' | 'epub';

export type AssetOwner = {
    id: string;
    username: string;
    name: string;
    thumbnail: string;
    use_channel: boolean;
};

export type AssetReportResponse = {
    user: AssetReportUser;
    first_watch: (string | null);
    modified: (string | null);
    progress: (number | null);
    passed: (boolean | null);
};

export type AssetReportUser = {
    id: string;
    username: string;
    name: string;
    thumbnail: string;
    use_channel: boolean;
};

export type AssetResourceCreateRequest = {
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    hide_from_list: boolean;
    start_date: string;
    end_date?: (string | null);
    cutoff_progress: number;
    thumbnail?: (string | null);
    duration: number;
    sub_kind: AssetKind;
    entrypoint: string;
    uploaded: boolean;
};

export type AssetResourceResponse = {
    id: string;
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    hide_from_list: boolean;
    start_date: string;
    end_date: (string | null);
    cutoff_progress: number;
    thumbnail: string;
    duration: number;
    sub_kind: AssetKind;
    entrypoint: string;
    uploaded: boolean;
    owner: AssetOwner;
    kind: LearningResourceKind;
};

export type AssetResourceUpdateRequest = {
    title?: string;
    description?: string;
    is_public?: boolean;
    featured?: boolean;
    hide_from_list?: boolean;
    start_date?: string;
    end_date?: (string | null);
    cutoff_progress?: number;
    thumbnail?: (string | null);
    duration?: number;
    sub_kind?: AssetKind;
    entrypoint?: string;
    uploaded?: boolean;
};

export type AssetWatchUpdateRequest = {
    watch_bitmap?: ((Blob | File) | null);
    length?: (number | null);
    last_position: number;
    last_location?: (string | null);
};

export type Body_AccountUploadFiles = {
    files: Array<((Blob | File))>;
};

export type Body_CourseCreateEsimsaCourse = {
    file: (Blob | File);
};

export type Body_MemberUploadMemberXlsx = {
    file: (Blob | File);
};

export type Body_PublicLogin = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type BookmarkedContentResponse = {
    id: string;
    title: string;
    featured: boolean;
    start_date: string;
    end_date: (string | null);
    created: string;
    thumbnail: string;
    kind: 'video' | 'playlist' | 'asset' | 'quiz' | 'survey' | 'exam' | 'lesson' | 'course';
    bookmarked_at: string;
    owner: ContentOwner;
};

export type kind = 'video' | 'playlist' | 'asset' | 'quiz' | 'survey' | 'exam' | 'lesson' | 'course';

export type CertificateCreateRequest = {
    resource_id: string;
};

export type CertificateResponse = {
    pdf: string;
    thumbnail: string;
};

export type CertificateTemplateSchema = {
    id: string;
    title: string;
    thumbnail: string;
};

export type ChannelDisplayResponse = {
    id: string;
    modified: string;
    title: string;
    description: string;
    welcome: string;
    active_resources: Array<(string)>;
    member_fields: Array<(string)>;
    thumbnail: string;
    banner: string;
    resources: Array<ResourceSchema>;
    owner: ChannelOwner;
    member_count: number;
    member_id: (string | null);
};

export type ChannelOwner = {
    id: string;
    username: string;
    name: string;
    thumbnail: string;
    use_channel: boolean;
};

export type ChannelUpdateRequest = {
    title?: string;
    description?: string;
    welcome?: string;
    active_resources?: Array<(string)>;
    member_fields?: Array<(string)>;
    thumbnail?: string;
    banner?: string;
    resources?: Array<ResourceSchema>;
};

export type ChannelUpdateResponse = {
    title: string;
    description: string;
    welcome: string;
    active_resources: Array<(string)>;
    member_fields: Array<(string)>;
    thumbnail: string;
    banner: string;
    resources: Array<ResourceSchema>;
    id: string;
    modified: string;
};

export type CommentAuthor = {
    id: string;
    username: string;
    name: string;
    thumbnail: string;
    use_channel: boolean;
};

export type CommentDisplayResponse = {
    id: string;
    parent_id?: (string | null);
    thread_id: string;
    content: string;
    is_question: boolean;
    solved: boolean;
    pinned: boolean;
    rating?: (number | null);
    author: CommentAuthor;
    deleted: boolean;
    created: string;
    bookmark_count: number;
    like_count: number;
    flag_count: number;
    children: Array<CommentDisplayResponse>;
    bookmarked: boolean;
    liked: boolean;
    flagged: boolean;
    thread_title?: (string | null);
};

export type CommentResourceCreateRequest = {
    parent_id?: (string | null);
    thread_id: string;
    content: string;
    is_question: boolean;
    solved: boolean;
    pinned: boolean;
    rating?: (number | null);
    receivers?: Array<(string)>;
};

export type CommentResourceResponse = {
    parent_id?: (string | null);
    thread_id: string;
    content: string;
    is_question: boolean;
    solved: boolean;
    pinned: boolean;
    rating?: (number | null);
    id: string;
    author: CommentAuthor;
    deleted: boolean;
    created: string;
    thread_title?: (string | null);
};

export type CommentUpdateRequest = {
    parent_id?: (string | null);
    thread_id?: string;
    content?: string;
    is_question?: boolean;
    solved?: boolean;
    pinned?: boolean;
    rating?: (number | null);
    deleted?: (boolean | null);
};

export type ContentOwner = {
    id: string;
    username: string;
    name: string;
    thumbnail: string;
    use_channel: boolean;
};

export type CourseCertificateSchema = {
    pdf: string;
    thumbnail: string;
};

export type CourseDisplayResponse = {
    id: string;
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    start_date: string;
    end_date: (string | null);
    owner: CourseOwner;
    modified: string;
    thumbnail: string;
    kind: LearningResourceKind;
    preview: string;
    marketing_url: string;
    target: string;
    level: CourseLevel;
    cutoff_progress: number;
    cutoff_score: number;
    registration_limit: number;
    emon_managed_course: boolean;
    invitation_required: boolean;
    learning_days: number;
    closed: boolean;
    sequential_learning: boolean;
    bookmark_count: number;
    like_count: number;
    flag_count: number;
    bookmarked: boolean;
    liked: boolean;
    flagged: boolean;
    enrolled: boolean;
    score: (number | null);
    progress: (number | null);
    passed: (boolean | null);
    resource_location: (ResourceLocation | null);
    certificate_templates: Array<CertificateTemplateSchema>;
    learning_start?: (string | null);
    learning_end?: (string | null);
    certificates: Array<CourseCertificateSchema>;
};

export type CourseEnrolledUser = {
    id: string;
    username: string;
    name: string;
    thumbnail: string;
    use_channel: boolean;
};

export type CourseEnrollRequest = {
    enrollment_token?: (string | null);
};

export type CourseEnrollResponse = {
    enrollment_date: string;
    learning_start: string;
    learning_end: string;
};

export type CourseLearningRequest = {
    progress: number;
    score: number;
    passed: boolean;
    resource_location: ResourceLocation;
};

export type CourseLessonOutlineSchema = {
    id: string;
    title: string;
    resources: Array<ResourceSchema>;
};

export type CourseLevel = 'beginner' | 'intermediate' | 'advanced' | 'general';

export type CourseOutlineReponse = {
    id: string;
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    start_date: string;
    end_date: (string | null);
    enrollment_start: string;
    enrollment_end: (string | null);
    owner: CourseOwner;
    modified: string;
    thumbnail: string;
    preview: string;
    target: string;
    level: CourseLevel;
    cutoff_progress: number;
    cutoff_score: number;
    registration_limit: number;
    emon_managed_course: boolean;
    invitation_required: boolean;
    learning_days: number;
    closed: boolean;
    certificate_templates: Array<CertificateTemplateSchema>;
    lessons: Array<CourseLessonOutlineSchema>;
    enrolled?: boolean;
};

export type CourseOwner = {
    id: string;
    username: string;
    name: string;
    thumbnail: string;
    use_channel: boolean;
};

export type CourseReportResponse = {
    user: CourseEnrolledUser;
    learning_start: string;
    learning_end: string;
    progress: (number | null);
    score: (number | null);
    passed: (boolean | null);
};

export type CourseResourceCreateRequest = {
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    start_date: string;
    end_date?: (string | null);
    thumbnail?: (string | null);
    preview: string;
    target: string;
    level: CourseLevel;
    cutoff_progress: number;
    cutoff_score: number;
    marketing_url: string;
    enrollment_start: string;
    enrollment_end?: (string | null);
    registration_limit: number;
    emon_managed_course: boolean;
    invitation_required: boolean;
    learning_days: number;
    closed: boolean;
    sequential_learning: boolean;
    certificate_templates: (Array<CertificateTemplateSchema> | null);
    lessons: (Array<CourseResourceLesson> | null);
};

export type CourseResourceLesson = {
    id: string;
    title: string;
    weight?: number;
};

export type CourseResourceResponse = {
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    start_date: string;
    end_date?: (string | null);
    thumbnail?: (string | null);
    preview: string;
    target: string;
    level: CourseLevel;
    cutoff_progress: number;
    cutoff_score: number;
    marketing_url: string;
    enrollment_start: string;
    enrollment_end?: (string | null);
    registration_limit: number;
    emon_managed_course: boolean;
    invitation_required: boolean;
    learning_days: number;
    closed: boolean;
    sequential_learning: boolean;
    certificate_templates: (Array<CertificateTemplateSchema> | null);
    lessons: (Array<CourseResourceLesson> | null);
    id: string;
    owner: CourseOwner;
    modified: string;
};

export type CourseResourceUpdateRequest = {
    title?: string;
    description?: string;
    is_public?: boolean;
    featured?: boolean;
    start_date?: string;
    end_date?: (string | null);
    thumbnail?: (string | null);
    preview?: string;
    target?: string;
    level?: CourseLevel;
    cutoff_progress?: number;
    cutoff_score?: number;
    marketing_url?: string;
    enrollment_start?: string;
    enrollment_end?: (string | null);
    registration_limit?: number;
    emon_managed_course?: boolean;
    invitation_required?: boolean;
    learning_days?: number;
    closed?: boolean;
    sequential_learning?: boolean;
    certificate_templates?: (Array<CertificateTemplateSchema> | null);
    lessons?: (Array<CourseResourceLesson> | null);
};

export type ExamAttemptContext = {
    course_id: string;
    lesson_id: string;
};

export type ExamAttemptQuestion = {
    id: number;
    question: string;
    help_text: string;
    kind: ExamQuestionKind;
    selections: Array<(string)>;
    weight: number;
};

export type ExamAttemptReadyRequest = {
    context: (ExamAttemptContext | null);
};

export type ExamAttemptResponse = {
    id: string;
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    start_date: string;
    end_date: (string | null);
    cutoff_score: number;
    submission: (ExamAttemptSubmission | null);
    kind: LearningResourceKind;
    owner: ExamOwner;
    finding: ({
    [key: string]: ExamQuestionFinding;
} | null);
    final_message: string;
    duration: number;
    sub_kind: ExamKind;
    score: (number | null);
    passed: (boolean | null);
    status: (SubmissionStatus | null);
};

export type ExamAttemptStartRequest = {
    start_time: string;
};

export type ExamAttemptSubmission = {
    start_time: (string | null);
    end_time: (string | null);
    answers: {
        [key: string]: (string);
    };
    grading: {
        [key: string]: (number | null);
    };
    feedback: {
        [key: string]: (string | null);
    };
    earned_score: number;
    possible_score: number;
    graded_time: (string | null);
    questions: Array<ExamAttemptQuestion>;
    context: (ExamAttemptContext | null);
};

export type ExamAttemptSubmitRequest = {
    answers: {
        [key: string]: (string);
    };
};

export type ExamDisplayResponse = {
    id: string;
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    start_date: string;
    end_date: (string | null);
    owner: ExamOwner;
    modified: string;
    sub_kind: ExamKind;
    duration: number;
    cutoff_score: number;
    question_composition: {
        [key: string]: (number);
    };
    thumbnail: string;
    kind: LearningResourceKind;
    grading_method: GradingMethodEnum;
    bookmark_count: number;
    like_count: number;
    flag_count: number;
    bookmarked: boolean;
    liked: boolean;
    flagged: boolean;
    score: (number | null);
    passed: (boolean | null);
    status: (SubmissionStatus | null);
    context: (ExamAttemptContext | null);
};

export type ExamGradingExam = {
    id: string;
    title: string;
    sub_kind: ExamKind;
};

export type ExamGradingRequest = {
    grading: {
        [key: string]: (number | null);
    };
    feedback: {
        [key: string]: (string | null);
    };
};

export type ExamGradingSubmissionReponse = {
    id: string;
    user: ExamSubmissionUser;
    score: (number | null);
    status: (SubmissionStatus | null);
    end_time: (string | null);
    graded_time: (string | null);
    exam: ExamGradingExam;
};

export type ExamInProgressSchema = {
    id: string;
    title: string;
    remains: number;
    context: (ExamAttemptContext | null);
};

export type ExamKind = 'midterm_exam' | 'final_exam' | 'assignment' | 'general_exam';

export type ExamOwner = {
    id: string;
    username: string;
    name: string;
    thumbnail: string;
    use_channel: boolean;
};

export type ExamQuestionFinding = {
    kind: ExamQuestionKind;
    question: string;
    selections: Array<(string)>;
    occurrences: Array<(number)>;
    correct_answer: string;
    weight: number;
    explanation: string;
    answer_criteria: string;
    grading_method: string;
    reference: string;
    keywords: string;
};

export type ExamQuestionKind = 'single_selection' | 'ox_selection' | 'text_input' | 'number_input' | 'essay';

export type ExamReportResponse = {
    user: ExamSubmissionUser;
    start_time: (string | null);
    end_time: (string | null);
    score: (number | null);
    status: (string | null);
};

export type ExamResourceCreateRequest = {
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    hide_from_list: boolean;
    start_date: string;
    end_date?: (string | null);
    success_message: string;
    failure_message: string;
    sub_kind: ExamKind;
    duration: number;
    question_composition: ExamResourceQuestionComposition;
    cutoff_score: number;
    randomize: boolean;
    enable_finding: boolean;
    questions: Array<ExamResourceQuestionCreate>;
    thumbnail?: (string | null);
};

export type ExamResourceQuestionComposition = {
    single_selection?: number;
    ox_selection?: number;
    text_input?: number;
    number_input?: number;
    essay?: number;
};

export type ExamResourceQuestionCreate = {
    question: string;
    help_text: string;
    kind: ExamQuestionKind;
    selections: Array<(string)>;
    correct_answer: string;
    answer_criteria: string;
    explanation: string;
    reference: string;
    keywords: string;
    weight: number;
};

export type ExamResourceQuestionResource = {
    question: string;
    help_text: string;
    kind: ExamQuestionKind;
    selections: Array<(string)>;
    correct_answer: string;
    answer_criteria: string;
    explanation: string;
    reference: string;
    keywords: string;
    weight: number;
    id: number;
};

export type ExamResourceQuestionUpdate = {
    question?: string;
    help_text?: string;
    kind?: ExamQuestionKind;
    selections?: Array<(string)>;
    correct_answer?: string;
    answer_criteria?: string;
    explanation?: string;
    reference?: string;
    keywords?: string;
    weight?: number;
    id?: (number | null);
};

export type ExamResourceResponse = {
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    hide_from_list: boolean;
    start_date: string;
    end_date?: (string | null);
    success_message: string;
    failure_message: string;
    sub_kind: ExamKind;
    duration: number;
    question_composition: ExamResourceQuestionComposition;
    cutoff_score: number;
    randomize: boolean;
    enable_finding: boolean;
    questions: Array<ExamResourceQuestionResource>;
    thumbnail?: (string | null);
    id: string;
    owner: ExamOwner;
    modified: string;
};

export type ExamResourceUpdateRequest = {
    title?: string;
    description?: string;
    is_public?: boolean;
    featured?: boolean;
    hide_from_list?: boolean;
    start_date?: string;
    end_date?: (string | null);
    success_message?: string;
    failure_message?: string;
    sub_kind?: ExamKind;
    duration?: number;
    question_composition?: ExamResourceQuestionComposition;
    cutoff_score?: number;
    randomize?: boolean;
    enable_finding?: boolean;
    questions?: Array<ExamResourceQuestionUpdate>;
    thumbnail?: (string | null);
};

export type ExamsInprogressError = {
    message: string;
    exams_in_progress: Array<ExamInProgressSchema>;
};

export type ExamSubmissionUser = {
    id: string;
    username: string;
    name: string;
    thumbnail: string;
    use_channel: boolean;
};

export type GradingMethodEnum = 'none' | 'progress' | 'score';

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type ImportantResponse = {
    exams_in_progress: Array<ExamInProgressSchema>;
};

export type ImportYoutubeRequest = {
    youtube_id: string;
};

export type InvitationAcceptRequest = {
    token: string;
    new_password: string;
};

export type LearningResourceKind = 'video' | 'playlist' | 'short' | 'quiz' | 'survey' | 'exam' | 'asset' | 'lesson' | 'course' | 'group' | 'post' | 'channel';

export type LessonDisplayResponse = {
    id: string;
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    start_date: string;
    end_date: (string | null);
    owner: LessonOwner;
    resources: Array<ResourceSchema>;
    resource_displays: Array<(VideoDisplayResponse | AssetDisplayResponse | QuizDisplayResponse | SurveyDisplayResponse | ExamDisplayResponse)>;
    score: (number | null);
    progress: (number | null);
    passed: (boolean | null);
    modified: string;
    thumbnail: string;
    kind: LearningResourceKind;
    grading_method: GradingMethodEnum;
    bookmark_count: number;
    like_count: number;
    flag_count: number;
    bookmarked: boolean;
    liked: boolean;
    flagged: boolean;
    weight?: (number | null);
};

export type LessonOwner = {
    id: string;
    username: string;
    name: string;
    thumbnail: string;
    use_channel: boolean;
};

export type LessonResourceCreateRequest = {
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    hide_from_list: boolean;
    start_date: string;
    end_date?: (string | null);
    resources: Array<ResourceSchema>;
    thumbnail?: (string | null);
    grading_method: GradingMethodEnum;
};

export type LessonResourceResponse = {
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    hide_from_list: boolean;
    start_date: string;
    end_date?: (string | null);
    resources: Array<ResourceSchema>;
    thumbnail?: (string | null);
    grading_method: GradingMethodEnum;
    id: string;
    owner: LessonOwner;
};

export type LessonResourceUpdateRequest = {
    title?: string;
    description?: string;
    is_public?: boolean;
    featured?: boolean;
    hide_from_list?: boolean;
    start_date?: string;
    end_date?: (string | null);
    resources?: Array<ResourceSchema>;
    thumbnail?: (string | null);
    grading_method?: GradingMethodEnum;
};

export type LoginResponse = {
    refresh_token_expire: string;
};

export type MemberCreateRequest = {
    channel_id: string;
    user_id: string;
    data?: {
        [key: string]: (string);
    };
    memo?: string;
};

export type MemberDisplayResponse = {
    id: string;
    username: string;
    name: string;
    thumbnail: string;
    use_channel: boolean;
    email: string;
    memo: string;
    data: {
        [key: string]: (string);
    };
    created: string;
    invited_at: (string | null);
    joined_at: (string | null);
};

export type MemberMessageRequest = {
    user_message: UserMessageSchema;
    receivers?: Array<(string)>;
    member_search?: (string | null);
};

export type MemberUpdateRequest = {
    data?: {
        [key: string]: (string);
    };
    memo?: string;
};

export type MemberXlsxResponse = {
    add_member: Array<(string)>;
    update_member: Array<(string)>;
    skip_member: Array<(string)>;
    add_roster: Array<(string)>;
    update_roster: Array<(string)>;
    skip_roster: Array<(string)>;
    row_error: Array<(string)>;
    invalid_username: Array<(string)>;
    duplicate_username: Array<(string)>;
    email_conflict: Array<(string)>;
    invalid_email: Array<(string)>;
    duplicate_email: Array<(string)>;
    database_error: Array<(string)>;
};

export type MessageMeta = {
    context?: Array<(string)>;
};

export type MessageRequest = {
    content: string;
    meta: MessageMeta;
    location: string;
};

export type MessageResponse = {
    id: string;
    role: MessageRole;
    content: string;
    meta: MessageMeta;
    location: string;
    created: string;
};

export type MessageRole = 'user' | 'assistant';

export type Paginated_AssetDisplayResponse_ = {
    items: Array<AssetDisplayResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_AssetReportResponse_ = {
    items: Array<AssetReportResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_BookmarkedContentResponse_ = {
    items: Array<BookmarkedContentResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_ChannelDisplayResponse_ = {
    items: Array<ChannelDisplayResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_CommentDisplayResponse_ = {
    items: Array<CommentDisplayResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_CourseDisplayResponse_ = {
    items: Array<CourseDisplayResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_CourseReportResponse_ = {
    items: Array<CourseReportResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_ExamDisplayResponse_ = {
    items: Array<ExamDisplayResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_ExamGradingSubmissionReponse_ = {
    items: Array<ExamGradingSubmissionReponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_ExamReportResponse_ = {
    items: Array<ExamReportResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_LessonDisplayResponse_ = {
    items: Array<LessonDisplayResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_MemberDisplayResponse_ = {
    items: Array<MemberDisplayResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_MessageResponse_ = {
    items: Array<MessageResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_PlaylistCheckResponse_ = {
    items: Array<PlaylistCheckResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_PlaylistDisplayResponse_ = {
    items: Array<PlaylistDisplayResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_PlaylistReportResponse_ = {
    items: Array<PlaylistReportResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_QuizDisplayResponse_ = {
    items: Array<QuizDisplayResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_QuizReportResponse_ = {
    items: Array<QuizReportResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_SurveyDisplayResponse_ = {
    items: Array<SurveyDisplayResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_SurveyReportResponse_ = {
    items: Array<SurveyReportResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_TemplateDisplayResponse_ = {
    items: Array<TemplateDisplayResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_ThreadResponse_ = {
    items: Array<ThreadResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_Union_VideoDisplayResponse__PlaylistDisplayResponse__AssetDisplayResponse__QuizDisplayResponse__SurveyDisplayResponse__ExamDisplayResponse__CourseDisplayResponse__ = {
    items: Array<(VideoDisplayResponse | PlaylistDisplayResponse | AssetDisplayResponse | QuizDisplayResponse | SurveyDisplayResponse | ExamDisplayResponse | CourseDisplayResponse)>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_UserMessageResponse_ = {
    items: Array<UserMessageResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_VideoDisplayResponse_ = {
    items: Array<VideoDisplayResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_VideoReportResponse_ = {
    items: Array<VideoReportResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type Paginated_VideoSearchResultResponse_ = {
    items: Array<VideoSearchResultResponse>;
    total: number;
    page: number;
    size: number;
    pages: number;
};

export type PasswordResetConfirmRequest = {
    token: string;
    new_password: string;
};

export type PasswordResetRequest = {
    email: string;
    confirm_url: string;
};

export type PlaylistCheckResponse = {
    id: string;
    title: string;
    is_in: boolean;
    video_count: number;
};

export type PlaylistDisplayResponse = {
    id: string;
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    owner: PlaylistOwner;
    thumbnail: string;
    uploader: string;
    duration: number;
    video_count: number;
    progress: (number | null);
    passed: (boolean | null);
    passed_str: (string | null);
    modified: string;
    live_count: number;
    kind: LearningResourceKind;
    bookmark_count: number;
    like_count: number;
    flag_count: number;
    bookmarked: boolean;
    liked: boolean;
    flagged: boolean;
};

export type PlaylistOwner = {
    id: string;
    username: string;
    name: string;
    thumbnail: string;
    use_channel: boolean;
};

export type PlaylistReportResponse = {
    user: PlaylistReportUser;
    first_watch: (string | null);
    modified: (string | null);
    progress: (number | null);
    passed: (boolean | null);
};

export type PlaylistReportUser = {
    id: string;
    username: string;
    name: string;
    thumbnail: string;
    use_channel: boolean;
};

export type PlaylistResourceCreateRequest = {
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    thumbnail?: (string | null);
};

export type PlaylistResourceResponse = {
    id: string;
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    owner: PlaylistOwner;
    uploader: string;
    thumbnail: string;
};

export type PlaylistResourceUpdateRequest = {
    title?: string;
    description?: string;
    is_public?: boolean;
    featured?: boolean;
    thumbnail?: (string | null);
};

export type PlaylistResumeResponse = {
    video_id: string;
};

export type PlaylistVideoItem = {
    playlist_id: string;
    video_id: string;
    order: (number | null);
};

export type PlaylistVideoRequest = {
    videos: Array<PlaylistVideoItem>;
};

export type PlaylistViewResponse = {
    id: string;
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    owner: PlaylistOwner;
    thumbnail: string;
    uploader: string;
    duration: number;
    video_count: number;
    progress: (number | null);
    passed: (boolean | null);
    passed_str: (string | null);
    modified: string;
    live_count: number;
    kind: LearningResourceKind;
    bookmark_count: number;
    like_count: number;
    flag_count: number;
    bookmarked: boolean;
    liked: boolean;
    flagged: boolean;
};

export type QuizAttemptContext = {
    course_id: string;
    lesson_id: string;
};

export type QuizAttemptQuestion = {
    id: number;
    question: string;
    help_text: string;
    kind: QuizQuestionKind;
    selections: Array<(string)>;
    weight: number;
};

export type QuizAttemptReadyRequest = {
    context: (QuizAttemptContext | null);
};

export type QuizAttemptResponse = {
    id: string;
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    start_date: string;
    end_date: (string | null);
    resources: Array<ResourceSchema>;
    cutoff_score: number;
    submission: (QuizAttemptSubmission | null);
    kind: LearningResourceKind;
    owner: QuizOwner;
    finding: ({
    [key: string]: QuizQuestionFinding;
} | null);
    final_message: string;
    score: (number | null);
    passed: (boolean | null);
    status: (SubmissionStatus | null);
};

export type QuizAttemptSubmission = {
    start_time: (string | null);
    end_time: (string | null);
    answers: {
        [key: string]: (string);
    };
    grading: {
        [key: string]: (number | null);
    };
    feedback: {
        [key: string]: (string | null);
    };
    earned_score: number;
    possible_score: number;
    questions: Array<QuizAttemptQuestion>;
    context: (QuizAttemptContext | null);
};

export type QuizAttemptSubmitRequest = {
    answers: {
        [key: string]: (string);
    };
};

export type QuizDisplayResponse = {
    id: string;
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    start_date: string;
    end_date: (string | null);
    resources: Array<ResourceSchema>;
    owner: QuizOwner;
    modified: string;
    thumbnail: string;
    kind: LearningResourceKind;
    grading_method: GradingMethodEnum;
    bookmark_count: number;
    like_count: number;
    flag_count: number;
    bookmarked: boolean;
    liked: boolean;
    flagged: boolean;
    score: (number | null);
    passed: (boolean | null);
    status: (SubmissionStatus | null);
    context: (QuizAttemptContext | null);
};

export type QuizOwner = {
    id: string;
    username: string;
    name: string;
    thumbnail: string;
    use_channel: boolean;
};

export type QuizQuestionFinding = {
    kind: QuizQuestionKind;
    question: string;
    selections: Array<(string)>;
    occurrences: Array<(number)>;
    correct_answer: string;
    weight: number;
};

export type QuizQuestionKind = 'single_selection' | 'number_input';

export type QuizReportResponse = {
    user: QuizReportUser;
    start_time: (string | null);
    end_time: (string | null);
    score: (number | null);
    status: (SubmissionStatus | null);
};

export type QuizReportUser = {
    id: string;
    username: string;
    name: string;
    thumbnail: string;
    use_channel: boolean;
};

export type QuizResourceCreateRequest = {
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    hide_from_list: boolean;
    start_date: string;
    end_date?: (string | null);
    resources: (Array<ResourceSchema> | null);
    success_message: string;
    failure_message: string;
    cutoff_score: number;
    randomize: boolean;
    enable_finding: boolean;
    questions: Array<QuizResourceQuestionCreate>;
    thumbnail?: (string | null);
};

export type QuizResourceQuestionCreate = {
    question: string;
    help_text: string;
    kind: QuizQuestionKind;
    selections: Array<(string)>;
    correct_answer: string;
    weight: number;
};

export type QuizResourceQuestionResource = {
    question: string;
    help_text: string;
    kind: QuizQuestionKind;
    selections: Array<(string)>;
    correct_answer: string;
    weight: number;
    id: number;
};

export type QuizResourceQuestionUpdate = {
    question?: string;
    help_text?: string;
    kind?: QuizQuestionKind;
    selections?: Array<(string)>;
    correct_answer?: string;
    weight?: number;
    id?: (number | null);
};

export type QuizResourceResponse = {
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    hide_from_list: boolean;
    start_date: string;
    end_date?: (string | null);
    resources: (Array<ResourceSchema> | null);
    success_message: string;
    failure_message: string;
    cutoff_score: number;
    randomize: boolean;
    enable_finding: boolean;
    questions: Array<QuizResourceQuestionResource>;
    thumbnail?: (string | null);
    id: string;
    owner: QuizOwner;
    modified: string;
};

export type QuizResourceUpdateRequest = {
    title?: string;
    description?: string;
    is_public?: boolean;
    featured?: boolean;
    hide_from_list?: boolean;
    start_date?: string;
    end_date?: (string | null);
    resources?: (Array<ResourceSchema> | null);
    success_message?: string;
    failure_message?: string;
    cutoff_score?: number;
    randomize?: boolean;
    enable_finding?: boolean;
    questions?: Array<QuizResourceQuestionUpdate>;
    thumbnail?: (string | null);
};

export type ResendVerificationEmailRequest = {
    email: string;
    email_verification_url: string;
};

export type ResourceLocation = {
    resource_id: string;
    lesson_id: string;
};

export type ResourceSchema = {
    kind: 'video' | 'playlist' | 'asset' | 'quiz' | 'survey' | 'exam' | 'lesson' | 'course' | 'channel';
    sub_kind?: (string | null);
    id: string;
    title: string;
    thumbnail: string;
    username: string;
};

export type kind2 = 'video' | 'playlist' | 'asset' | 'quiz' | 'survey' | 'exam' | 'lesson' | 'course' | 'channel';

export type RosterCreateRequest = {
    username: string;
    name: string;
    email: string;
    data?: {
        [key: string]: (string);
    };
    memo?: string;
};

export type RosterUpdateRequest = {
    username?: string;
    name?: string;
    email?: string;
    data?: {
        [key: string]: (string);
    };
    memo?: string;
};

export type Sender = {
    id: string;
    username: string;
    name: string;
    thumbnail: string;
    use_channel: boolean;
};

export type SubmissionStatus = 'passed' | 'failed' | 'grading' | 'timeout' | 'in_progress' | 'ready';

export type SurveyAttemptQuestion = {
    id: number;
    question: string;
    help_text: string;
    kind: SurveyQuestionKind;
    selections: Array<(string)>;
    mandatory: boolean;
};

export type SurveyAttemptResponse = {
    id: string;
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    start_date: string;
    end_date: (string | null);
    resources: Array<ResourceSchema>;
    submission: (SurveyAttemptSubmission | null);
    kind: LearningResourceKind;
    owner: SurveyOwner;
    finding: ({
    [key: string]: SurveyQuestionFinding;
} | null);
    final_message: string;
    score: (number | null);
    passed: (boolean | null);
    status: (SubmissionStatus | null);
    enable_finding: boolean;
    submission_count: number;
};

export type SurveyAttemptSubmission = {
    start_time: (string | null);
    end_time: (string | null);
    answers: {
        [key: string]: (string);
    };
    questions: Array<SurveyAttemptQuestion>;
};

export type SurveyAttemptSubmitRequest = {
    answers: {
        [key: string]: (string);
    };
};

export type SurveyDisplayResponse = {
    id: string;
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    start_date: string;
    end_date: (string | null);
    resources: Array<ResourceSchema>;
    owner: SurveyOwner;
    modified: string;
    thumbnail: string;
    kind: LearningResourceKind;
    grading_method: GradingMethodEnum;
    bookmark_count: number;
    like_count: number;
    flag_count: number;
    bookmarked: boolean;
    liked: boolean;
    flagged: boolean;
    score: (number | null);
    passed: (boolean | null);
    status: (SubmissionStatus | null);
};

export type SurveyOwner = {
    id: string;
    username: string;
    name: string;
    thumbnail: string;
    use_channel: boolean;
};

export type SurveyQuestionFinding = {
    kind: SurveyQuestionKind;
    question: string;
    selections: Array<(string)>;
    occurrences: Array<(number)>;
    mandatory: (boolean | null);
};

export type SurveyQuestionKind = 'single_selection' | 'multiple_selection' | 'number_input' | 'text_input';

export type SurveyReportResponse = {
    user: SurveyReportUser;
    end_time: (string | null);
    status: (SubmissionStatus | null);
};

export type SurveyReportUser = {
    id: string;
    username: string;
    name: string;
    thumbnail: string;
    use_channel: boolean;
};

export type SurveyResourceCreateRequest = {
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    hide_from_list: boolean;
    start_date: string;
    end_date?: (string | null);
    resources: (Array<ResourceSchema> | null);
    complete_message: string;
    randomize: boolean;
    enable_finding: boolean;
    questions: Array<SurveyResourceQuestionCreate>;
    thumbnail?: (string | null);
};

export type SurveyResourceQuestionCreate = {
    question: string;
    help_text: string;
    kind: SurveyQuestionKind;
    selections: Array<(string)>;
    mandatory: boolean;
};

export type SurveyResourceQuestionResource = {
    question: string;
    help_text: string;
    kind: SurveyQuestionKind;
    selections: Array<(string)>;
    mandatory: boolean;
    id: number;
};

export type SurveyResourceQuestionUpdate = {
    question?: string;
    help_text?: string;
    kind?: SurveyQuestionKind;
    selections?: Array<(string)>;
    mandatory?: boolean;
    id?: (number | null);
};

export type SurveyResourceResponse = {
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    hide_from_list: boolean;
    start_date: string;
    end_date?: (string | null);
    resources: (Array<ResourceSchema> | null);
    complete_message: string;
    randomize: boolean;
    enable_finding: boolean;
    questions: Array<SurveyResourceQuestionResource>;
    thumbnail?: (string | null);
    id: string;
    owner: SurveyOwner;
    modified: string;
};

export type SurveyResourceUpdateRequest = {
    title?: string;
    description?: string;
    is_public?: boolean;
    featured?: boolean;
    hide_from_list?: boolean;
    start_date?: string;
    end_date?: (string | null);
    resources?: (Array<ResourceSchema> | null);
    complete_message?: string;
    randomize?: boolean;
    enable_finding?: boolean;
    questions?: Array<SurveyResourceQuestionUpdate>;
    thumbnail?: (string | null);
};

export type TemplateControl = {
    id: string;
    kind: 'title' | 'document_number' | 'completion_title' | 'completion_period' | 'learning_hours' | 'name' | 'birthdate' | 'issuer' | 'issue_date';
    left: string;
    top: string;
    width: string;
    font_size: number;
    is_placeholder: boolean;
    text_align: 'left' | 'center' | 'right';
    content: string;
};

export type kind3 = 'title' | 'document_number' | 'completion_title' | 'completion_period' | 'learning_hours' | 'name' | 'birthdate' | 'issuer' | 'issue_date';

export type text_align = 'left' | 'center' | 'right';

export type TemplateDisplayResponse = {
    id: string;
    title: string;
    owner: TemplateOwner;
    modified: string;
    thumbnail: string;
};

export type TemplateMeta = {
    page_size: 'A4_PORTRAIT' | 'A4_LANDSCAPE' | 'LETTER_PORTRAIT' | 'LETTER_LANDSCAPE';
    controls: Array<TemplateControl>;
};

export type page_size = 'A4_PORTRAIT' | 'A4_LANDSCAPE' | 'LETTER_PORTRAIT' | 'LETTER_LANDSCAPE';

export type TemplateOwner = {
    id: string;
    username: string;
    name: string;
    thumbnail: string;
    use_channel: boolean;
};

export type TemplateResourceCreateRequest = {
    title: string;
    description: string;
    meta: TemplateMeta;
    content: string;
    background: string;
};

export type TemplateResourceResponse = {
    title: string;
    description: string;
    meta: TemplateMeta;
    content: string;
    background: string;
    id: string;
    owner: TemplateOwner;
    modified: string;
    thumbnail: string;
};

export type TemplateResourceUpdateRequest = {
    title?: string;
    description?: string;
    meta?: TemplateMeta;
    content?: string;
    background?: string;
};

export type TemplateSelectorResponse = {
    id: string;
    title: string;
    thumbnail: string;
};

export type ThreadCreateRequest = {
    owner_id: string;
    thumbnail?: string;
    title: string;
    url: string;
    resource_kind: LearningResourceKind;
};

export type ThreadOwner = {
    id: string;
    username: string;
    name: string;
    thumbnail: string;
    use_channel: boolean;
};

export type ThreadResponse = {
    id: string;
    thumbnail: string;
    title: string;
    owner: ThreadOwner;
    url: string;
    kind: "thread";
    resource_kind: LearningResourceKind;
    comment_count: number;
    question_count: number;
    unsolved_count: number;
    created: string;
    rating_count?: (number | null);
    rating_avg?: (number | null);
};

export type ThreadUpdateRequest = {
    thumbnail: string;
    title: string;
};

export type UserCreateRequest = {
    username: string;
    email: string;
    password: string;
    name: string;
    email_verification_url: string;
    last_authed?: (string | null);
};

export type UserMessageResponse = {
    title: string;
    kind: LearningResourceKind;
    object_title: string;
    object_id: string;
    parcel?: {
        [key: string]: unknown;
    };
    id: string;
    time: string;
    read_time?: (string | null);
    sender?: (Sender | null);
};

export type UserMessageSchema = {
    title: string;
    kind: LearningResourceKind;
    object_title: string;
    object_id: string;
    parcel?: {
        [key: string]: unknown;
    };
};

export type UserResponse = {
    id: string;
    username: string;
    name: string;
    thumbnail: string;
    use_channel: boolean;
    email: string;
    birthdate: (string | null);
    description: string;
    created: string;
    last_authed?: (string | null);
};

export type UserUpdateRequest = {
    username?: string;
    email?: string;
    birthdate?: (string | null);
    name?: string;
    description?: string;
    thumbnail?: (string | null);
    last_authed?: (string | null);
    use_channel?: boolean;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type VideoDisplayResponse = {
    id: string;
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    owner: VideoOwner;
    thumbnail: string;
    uploader: string;
    duration: (number | null);
    cutoff_progress: number;
    score: (number | null);
    progress: (number | null);
    passed: (boolean | null);
    modified: string;
    sub_kind: VideoKind;
    kind: LearningResourceKind;
    grading_method: GradingMethodEnum;
    bookmark_count: number;
    like_count: number;
    flag_count: number;
    bookmarked: boolean;
    liked: boolean;
    flagged: boolean;
};

export type VideoKind = 'video' | 'short' | 'live';

export type VideoOwner = {
    id: string;
    username: string;
    name: string;
    thumbnail: string;
    use_channel: boolean;
};

export type VideoReportResponse = {
    user: VideoReportUser;
    first_watch: (string | null);
    modified: (string | null);
    progress: (number | null);
    passed: (boolean | null);
};

export type VideoReportUser = {
    id: string;
    username: string;
    name: string;
    thumbnail: string;
    use_channel: boolean;
};

export type VideoResourceResponse = {
    id: string;
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    hide_from_list: boolean;
    owner: VideoOwner;
    kind: LearningResourceKind;
    sub_kind: VideoKind;
    cutoff_progress: number;
    uploader: string;
    thumbnail: string;
};

export type VideoResourceUpdateRequest = {
    title?: string;
    description?: string;
    is_public?: boolean;
    featured?: boolean;
    hide_from_list?: boolean;
    cutoff_progress?: number;
    sub_kind?: VideoKind;
    thumbnail?: (string | null);
};

export type VideoSearchResultResponse = {
    id: string;
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    owner: VideoOwner;
    thumbnail: string;
    uploader: string;
    duration: (number | null);
    cutoff_progress: number;
    score: (number | null);
    progress: (number | null);
    passed: (boolean | null);
    modified: string;
    sub_kind: VideoKind;
    kind: LearningResourceKind;
    grading_method: GradingMethodEnum;
    bookmark_count: number;
    like_count: number;
    flag_count: number;
    bookmarked: boolean;
    liked: boolean;
    flagged: boolean;
    relevance: number;
    search_subtitles?: Array<VideoSearchSubtitle>;
};

export type VideoSearchSubtitle = {
    position: string;
    line: string;
};

export type VideoSubtitleResponse = {
    lang: string;
    lines: string;
};

export type VideoViewResponse = {
    id: string;
    title: string;
    description: string;
    is_public: boolean;
    featured: boolean;
    owner: VideoOwner;
    uploader: string;
    duration: (number | null);
    cutoff_progress: number;
    bookmark_count: number;
    like_count: number;
    flag_count: number;
    score: (number | null);
    progress: (number | null);
    passed: (boolean | null);
    last_position: (number | null);
    modified: string;
    sub_kind: VideoKind;
    thumbnail: string;
    tag_names: Array<(string)>;
    kind: LearningResourceKind;
    grading_method: GradingMethodEnum;
    bookmarked: boolean;
    liked: boolean;
    flagged: boolean;
};

export type WatchStartRequest = {
    first_watch: string;
};

export type WatchUpdateRequest = {
    watch_bitmap?: ((Blob | File) | null);
    length?: (number | null);
    last_position: number;
};

export type PublicCreateUserData = {
    requestBody: UserCreateRequest;
};

export type PublicCreateUserResponse = (unknown);

export type PublicVerifyEmailData = {
    token: string;
};

export type PublicVerifyEmailResponse = (unknown);

export type PublicResendVerificationEmailData = {
    requestBody: ResendVerificationEmailRequest;
};

export type PublicResendVerificationEmailResponse = (unknown);

export type PublicLoginData = {
    formData: Body_PublicLogin;
};

export type PublicLoginResponse = (LoginResponse);

export type PublicPasswordResetData = {
    requestBody: PasswordResetRequest;
};

export type PublicPasswordResetResponse = (unknown);

export type PublicPasswordResetConfirmData = {
    requestBody: PasswordResetConfirmRequest;
};

export type PublicPasswordResetConfirmResponse = (unknown);

export type PublicInvitationAcceptData = {
    requestBody: InvitationAcceptRequest;
};

export type PublicInvitationAcceptResponse = (UserResponse);

export type AccountGetMeData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
};

export type AccountGetMeResponse = (UserResponse);

export type AccountUpdateMeData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
    requestBody: UserUpdateRequest;
};

export type AccountUpdateMeResponse = (UserResponse);

export type AccountGetUserData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type AccountGetUserResponse = (UserResponse);

export type AccountGetUserByUsernameData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
    username: string;
};

export type AccountGetUserByUsernameResponse = (UserResponse);

export type AccountLogoutData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
};

export type AccountLogoutResponse = (unknown);

export type AccountUploadFilesData = {
    accessToken?: (string | null);
    formData: Body_AccountUploadFiles;
    refreshToken?: (string | null);
};

export type AccountUploadFilesResponse = (Array<(string)>);

export type CommentGetThreadsData = {
    accessToken?: (string | null);
    commenterId?: (string | null);
    orderBy?: 'created' | 'comment_count' | 'question_count' | 'unsolved_count';
    ownerId?: (string | null);
    page?: number;
    refreshToken?: (string | null);
    search?: (string | null);
    size?: number;
};

export type CommentGetThreadsResponse = (Paginated_ThreadResponse_);

export type CommentCreateThreadData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
    requestBody: ThreadCreateRequest;
};

export type CommentCreateThreadResponse = (ThreadResponse);

export type CommentUpdateThreadData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: ThreadUpdateRequest;
};

export type CommentUpdateThreadResponse = (unknown);

export type CommentCreateResourceData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
    requestBody: CommentResourceCreateRequest;
};

export type CommentCreateResourceResponse = (CommentResourceResponse);

export type CommentUpdateResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: CommentUpdateRequest;
};

export type CommentUpdateResourceResponse = (CommentResourceResponse);

export type CommentToggleActionData = {
    accessToken?: (string | null);
    action: 'bookmark' | 'like' | 'flag';
    id: string;
    refreshToken?: (string | null);
};

export type CommentToggleActionResponse = (unknown);

export type PublicGetThreadData = {
    ratingMode?: boolean;
    url: string;
};

export type PublicGetThreadResponse = (ThreadResponse);

export type PublicGetCommentsData = {
    orderBy?: 'created' | 'like_count';
    page?: number;
    search?: (string | null);
    size?: number;
    threadId?: (string | null);
    userId?: (string | null);
};

export type PublicGetCommentsResponse = (Paginated_CommentDisplayResponse_);

export type VideoGetDisplaysData = {
    accessToken?: (string | null);
    orderBy?: "modified";
    owner?: (string | null);
    page?: number;
    playlistId?: (string | null);
    refreshToken?: (string | null);
    search?: (string | null);
    size?: number;
    subKind?: (VideoKind | null);
    tag?: (string | null);
};

export type VideoGetDisplaysResponse = (Paginated_VideoDisplayResponse_);

export type VideoImportYoutubeVideoData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
    requestBody: ImportYoutubeRequest;
};

export type VideoImportYoutubeVideoResponse = (VideoDisplayResponse);

export type VideoGetTagsData = {
    accessToken?: (string | null);
    limit: number;
    refreshToken?: (string | null);
};

export type VideoGetTagsResponse = (Array<(string)>);

export type VideoGetViewData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type VideoGetViewResponse = (VideoViewResponse);

export type VideoGetSubtitlesData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type VideoGetSubtitlesResponse = (Array<VideoSubtitleResponse>);

export type VideoGetResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type VideoGetResourceResponse = (VideoResourceResponse);

export type VideoUpdateResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: VideoResourceUpdateRequest;
};

export type VideoUpdateResourceResponse = (VideoResourceResponse);

export type VideoDeleteResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type VideoDeleteResourceResponse = (unknown);

export type VideoGetWatchBitmapData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type VideoGetWatchBitmapResponse = ((Blob | File));

export type VideoStartWatchData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: WatchStartRequest;
};

export type VideoStartWatchResponse = (unknown);

export type VideoUpdateWatchData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: WatchUpdateRequest;
};

export type VideoUpdateWatchResponse = (unknown);

export type VideoDeleteWatchData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type VideoDeleteWatchResponse = (unknown);

export type VideoGetVideoReportData = {
    accessToken?: (string | null);
    asOf?: (string | null);
    id: string;
    orderBy?: 'first_watch' | 'modified';
    page?: number;
    refreshToken?: (string | null);
    search?: (string | null);
    size?: number;
    upTo?: (string | null);
};

export type VideoGetVideoReportResponse = (Paginated_VideoReportResponse_);

export type VideoDownloadVideoReportData = {
    accessToken?: (string | null);
    asOf?: (string | null);
    id: string;
    orderBy?: 'first_watch' | 'modified';
    refreshToken?: (string | null);
    search?: (string | null);
    upTo?: (string | null);
};

export type VideoDownloadVideoReportResponse = (string);

export type VideoToggleActionData = {
    accessToken?: (string | null);
    action: 'bookmark' | 'like' | 'flag';
    id: string;
    refreshToken?: (string | null);
};

export type VideoToggleActionResponse = (unknown);

export type PlaylistGetDisplaysData = {
    accessToken?: (string | null);
    orderBy?: "modified";
    owner?: (string | null);
    page?: number;
    refreshToken?: (string | null);
    search?: (string | null);
    size?: number;
};

export type PlaylistGetDisplaysResponse = (Paginated_PlaylistDisplayResponse_);

export type PlaylistImportYoutubePlaylistData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
    requestBody: ImportYoutubeRequest;
};

export type PlaylistImportYoutubePlaylistResponse = (PlaylistDisplayResponse);

export type PlaylistUpdatePlaylistVideosData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
    requestBody: PlaylistVideoRequest;
};

export type PlaylistUpdatePlaylistVideosResponse = (unknown);

export type PlaylistGetViewData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type PlaylistGetViewResponse = (PlaylistViewResponse);

export type PlaylistResumePlaylistData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type PlaylistResumePlaylistResponse = (PlaylistResumeResponse);

export type PlaylistGetResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type PlaylistGetResourceResponse = (PlaylistResourceResponse);

export type PlaylistUpdateResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: PlaylistResourceUpdateRequest;
};

export type PlaylistUpdateResourceResponse = (PlaylistResourceResponse);

export type PlaylistDeleteResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type PlaylistDeleteResourceResponse = (unknown);

export type PlaylistCreateResourceData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
    requestBody: PlaylistResourceCreateRequest;
};

export type PlaylistCreateResourceResponse = (PlaylistResourceResponse);

export type PlaylistGetPlaylistReportData = {
    accessToken?: (string | null);
    asOf?: (string | null);
    id: string;
    orderBy?: "modified";
    page?: number;
    refreshToken?: (string | null);
    search?: (string | null);
    size?: number;
    upTo?: (string | null);
};

export type PlaylistGetPlaylistReportResponse = (Paginated_PlaylistReportResponse_);

export type PlaylistDownloadPlaylistReportData = {
    accessToken?: (string | null);
    asOf?: (string | null);
    id: string;
    orderBy?: "modified";
    refreshToken?: (string | null);
    search?: (string | null);
    upTo?: (string | null);
};

export type PlaylistDownloadPlaylistReportResponse = (string);

export type PlaylistCheckVideoData = {
    accessToken?: (string | null);
    orderBy?: 'title' | 'created';
    page?: number;
    refreshToken?: (string | null);
    search?: string;
    size?: number;
    videoId: string;
};

export type PlaylistCheckVideoResponse = (Paginated_PlaylistCheckResponse_);

export type PlaylistToggleActionData = {
    accessToken?: (string | null);
    action: 'bookmark' | 'like' | 'flag';
    id: string;
    refreshToken?: (string | null);
};

export type PlaylistToggleActionResponse = (unknown);

export type AssetGetDisplaysData = {
    accessToken?: (string | null);
    orderBy?: 'title' | 'modified';
    owner?: (string | null);
    page?: number;
    refreshToken?: (string | null);
    search?: (string | null);
    size?: number;
    subKind?: (AssetKind | null);
};

export type AssetGetDisplaysResponse = (Paginated_AssetDisplayResponse_);

export type AssetGetDisplayData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type AssetGetDisplayResponse = (AssetDisplayResponse);

export type AssetGetResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type AssetGetResourceResponse = (AssetResourceResponse);

export type AssetUpdateResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: AssetResourceUpdateRequest;
};

export type AssetUpdateResourceResponse = (AssetResourceResponse);

export type AssetDeleteResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type AssetDeleteResourceResponse = (unknown);

export type AssetCreateResourceData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
    requestBody: AssetResourceCreateRequest;
};

export type AssetCreateResourceResponse = (AssetResourceResponse);

export type AssetGetWatchBitmapData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type AssetGetWatchBitmapResponse = ((Blob | File));

export type AssetStartWatchData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: WatchStartRequest;
};

export type AssetStartWatchResponse = (unknown);

export type AssetUpdateWatchData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: AssetWatchUpdateRequest;
};

export type AssetUpdateWatchResponse = (unknown);

export type AssetDeleteWatchData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type AssetDeleteWatchResponse = (unknown);

export type AssetGetAssetReportData = {
    accessToken?: (string | null);
    asOf?: (string | null);
    id: string;
    orderBy?: 'first_watch' | 'modified';
    page?: number;
    refreshToken?: (string | null);
    search?: (string | null);
    size?: number;
    upTo?: (string | null);
};

export type AssetGetAssetReportResponse = (Paginated_AssetReportResponse_);

export type AssetDownloadAssetReportData = {
    accessToken?: (string | null);
    asOf?: (string | null);
    id: string;
    orderBy?: 'first_watch' | 'modified';
    refreshToken?: (string | null);
    search?: (string | null);
    upTo?: (string | null);
};

export type AssetDownloadAssetReportResponse = (string);

export type AssetToggleActionData = {
    accessToken?: (string | null);
    action: 'bookmark' | 'like' | 'flag';
    id: string;
    refreshToken?: (string | null);
};

export type AssetToggleActionResponse = (unknown);

export type AssetPresignedUploadUrlData = {
    accessToken?: (string | null);
    assetId: string;
    contentType: string;
    filename: string;
    refreshToken?: (string | null);
};

export type AssetPresignedUploadUrlResponse = (string);

export type AssetHtmlViewData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type AssetHtmlViewResponse = (string);

export type AssetPdfViewData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type AssetPdfViewResponse = (string);

export type QuizGetDisplaysData = {
    accessToken?: (string | null);
    orderBy?: "modified";
    owner?: (string | null);
    page?: number;
    refreshToken?: (string | null);
    search?: (string | null);
    size?: number;
};

export type QuizGetDisplaysResponse = (Paginated_QuizDisplayResponse_);

export type QuizGetResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type QuizGetResourceResponse = (QuizResourceResponse);

export type QuizUpdateResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: QuizResourceUpdateRequest;
};

export type QuizUpdateResourceResponse = (QuizResourceResponse);

export type QuizDeleteResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type QuizDeleteResourceResponse = (unknown);

export type QuizCreateResourceData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
    requestBody: QuizResourceCreateRequest;
};

export type QuizCreateResourceResponse = (QuizResourceResponse);

export type QuizGetAttemptData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type QuizGetAttemptResponse = (QuizAttemptResponse);

export type QuizReadyAttemptData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: QuizAttemptReadyRequest;
};

export type QuizReadyAttemptResponse = (QuizAttemptResponse);

export type QuizSubmitAttemptData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: QuizAttemptSubmitRequest;
};

export type QuizSubmitAttemptResponse = (QuizAttemptResponse);

export type QuizDeleteAttemptData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type QuizDeleteAttemptResponse = (unknown);

export type QuizGetQuizReportData = {
    accessToken?: (string | null);
    asOf?: (string | null);
    id: string;
    orderBy?: "end_time";
    page?: number;
    refreshToken?: (string | null);
    search?: (string | null);
    size?: number;
    upTo?: (string | null);
};

export type QuizGetQuizReportResponse = (Paginated_QuizReportResponse_);

export type QuizDownloadQuizReportData = {
    accessToken?: (string | null);
    asOf?: (string | null);
    id: string;
    orderBy?: "end_time";
    refreshToken?: (string | null);
    search?: (string | null);
    upTo?: (string | null);
};

export type QuizDownloadQuizReportResponse = (string);

export type QuizToggleActionData = {
    accessToken?: (string | null);
    action: 'bookmark' | 'like' | 'flag';
    id: string;
    refreshToken?: (string | null);
};

export type QuizToggleActionResponse = (unknown);

export type QuizGetOwnedQuestionsData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
};

export type QuizGetOwnedQuestionsResponse = (Array<QuizResourceQuestionResource>);

export type SurveyGetDisplaysData = {
    accessToken?: (string | null);
    orderBy?: "modified";
    owner?: (string | null);
    page?: number;
    refreshToken?: (string | null);
    search?: (string | null);
    size?: number;
};

export type SurveyGetDisplaysResponse = (Paginated_SurveyDisplayResponse_);

export type SurveyGetResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type SurveyGetResourceResponse = (SurveyResourceResponse);

export type SurveyUpdateResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: SurveyResourceUpdateRequest;
};

export type SurveyUpdateResourceResponse = (SurveyResourceResponse);

export type SurveyDeleteResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type SurveyDeleteResourceResponse = (unknown);

export type SurveyCreateResourceData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
    requestBody: SurveyResourceCreateRequest;
};

export type SurveyCreateResourceResponse = (SurveyResourceResponse);

export type SurveyGetAttemptData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type SurveyGetAttemptResponse = (SurveyAttemptResponse);

export type SurveyReadyAttemptData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type SurveyReadyAttemptResponse = (SurveyAttemptResponse);

export type SurveySubmitAttemptData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: SurveyAttemptSubmitRequest;
};

export type SurveySubmitAttemptResponse = (SurveyAttemptResponse);

export type SurveyDeleteAttemptData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type SurveyDeleteAttemptResponse = (unknown);

export type SurveyGetSurveyReportData = {
    accessToken?: (string | null);
    asOf?: (string | null);
    id: string;
    orderBy?: "end_time";
    page?: number;
    refreshToken?: (string | null);
    search?: (string | null);
    size?: number;
    upTo?: (string | null);
};

export type SurveyGetSurveyReportResponse = (Paginated_SurveyReportResponse_);

export type SurveyDownloadSurveyReportData = {
    accessToken?: (string | null);
    asOf?: (string | null);
    id: string;
    orderBy?: "end_time";
    refreshToken?: (string | null);
    search?: (string | null);
    upTo?: (string | null);
};

export type SurveyDownloadSurveyReportResponse = (string);

export type SurveyToggleActionData = {
    accessToken?: (string | null);
    action: 'bookmark' | 'like' | 'flag';
    id: string;
    refreshToken?: (string | null);
};

export type SurveyToggleActionResponse = (unknown);

export type SurveyGetOwnedQuestionsData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
};

export type SurveyGetOwnedQuestionsResponse = (Array<SurveyResourceQuestionResource>);

export type ExamGetDisplaysData = {
    accessToken?: (string | null);
    orderBy?: "modified";
    owner?: (string | null);
    page?: number;
    refreshToken?: (string | null);
    search?: (string | null);
    size?: number;
};

export type ExamGetDisplaysResponse = (Paginated_ExamDisplayResponse_);

export type ExamGetResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type ExamGetResourceResponse = (ExamResourceResponse);

export type ExamUpdateResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: ExamResourceUpdateRequest;
};

export type ExamUpdateResourceResponse = (ExamResourceResponse);

export type ExamDeleteResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type ExamDeleteResourceResponse = (unknown);

export type ExamCreateResourceData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
    requestBody: ExamResourceCreateRequest;
};

export type ExamCreateResourceResponse = (ExamResourceResponse);

export type ExamGetAttemptData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type ExamGetAttemptResponse = (ExamAttemptResponse);

export type ExamReadyAttemptData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: ExamAttemptReadyRequest;
};

export type ExamReadyAttemptResponse = (ExamAttemptResponse);

export type ExamStartAttemptData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: ExamAttemptStartRequest;
};

export type ExamStartAttemptResponse = (ExamAttemptResponse);

export type ExamSubmitAttemptData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: ExamAttemptSubmitRequest;
};

export type ExamSubmitAttemptResponse = (ExamAttemptResponse);

export type ExamDeleteAttemptData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type ExamDeleteAttemptResponse = (unknown);

export type ExamGetGradingData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    userId: string;
};

export type ExamGetGradingResponse = (ExamAttemptResponse);

export type ExamSubmitGradingData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: ExamGradingRequest;
    userId: string;
};

export type ExamSubmitGradingResponse = (ExamAttemptResponse);

export type ExamGetExamReportData = {
    accessToken?: (string | null);
    asOf?: (string | null);
    id: string;
    orderBy?: 'end_time' | 'start_time';
    page?: number;
    refreshToken?: (string | null);
    search?: (string | null);
    size?: number;
    upTo?: (string | null);
};

export type ExamGetExamReportResponse = (Paginated_ExamReportResponse_);

export type ExamDownloadExamReportData = {
    accessToken?: (string | null);
    asOf?: (string | null);
    id: string;
    orderBy?: 'end_time' | 'start_time';
    refreshToken?: (string | null);
    search?: (string | null);
    upTo?: (string | null);
};

export type ExamDownloadExamReportResponse = (string);

export type ExamGetGradingSubmissionsData = {
    accessToken?: (string | null);
    orderBy?: 'end_time' | 'start_time';
    page?: number;
    refreshToken?: (string | null);
    search?: (string | null);
    size?: number;
};

export type ExamGetGradingSubmissionsResponse = (Paginated_ExamGradingSubmissionReponse_);

export type ExamToggleActionData = {
    accessToken?: (string | null);
    action: 'bookmark' | 'like' | 'flag';
    id: string;
    refreshToken?: (string | null);
};

export type ExamToggleActionResponse = (unknown);

export type ExamGetOwnedQuestionsData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
};

export type ExamGetOwnedQuestionsResponse = (Array<ExamResourceQuestionResource>);

export type LessonGetDisplaysData = {
    accessToken?: (string | null);
    course?: (string | null);
    orderBy?: "modified";
    owner?: (string | null);
    page?: number;
    refreshToken?: (string | null);
    search?: (string | null);
    size?: number;
};

export type LessonGetDisplaysResponse = (Paginated_LessonDisplayResponse_);

export type LessonGetDisplayData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type LessonGetDisplayResponse = (LessonDisplayResponse);

export type LessonGetResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type LessonGetResourceResponse = (LessonResourceResponse);

export type LessonUpdateResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: LessonResourceUpdateRequest;
};

export type LessonUpdateResourceResponse = (LessonResourceResponse);

export type LessonDeleteResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type LessonDeleteResourceResponse = (unknown);

export type LessonCreateResourceData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
    requestBody: LessonResourceCreateRequest;
};

export type LessonCreateResourceResponse = (LessonResourceResponse);

export type LessonToggleActionData = {
    accessToken?: (string | null);
    action: 'bookmark' | 'like' | 'flag';
    id: string;
    refreshToken?: (string | null);
};

export type LessonToggleActionResponse = (unknown);

export type CourseGetDisplaysData = {
    accessToken?: (string | null);
    enrolled?: boolean;
    orderBy?: "modified";
    owner?: (string | null);
    page?: number;
    refreshToken?: (string | null);
    search?: (string | null);
    size?: number;
};

export type CourseGetDisplaysResponse = (Paginated_CourseDisplayResponse_);

export type CourseGetResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type CourseGetResourceResponse = (CourseResourceResponse);

export type CourseUpdateResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: CourseResourceUpdateRequest;
};

export type CourseUpdateResourceResponse = (CourseResourceResponse);

export type CourseDeleteResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type CourseDeleteResourceResponse = (unknown);

export type CourseCreateResourceData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
    requestBody: CourseResourceCreateRequest;
};

export type CourseCreateResourceResponse = (CourseResourceResponse);

export type CourseGetViewData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type CourseGetViewResponse = (CourseDisplayResponse);

export type CourseEnrollData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: CourseEnrollRequest;
};

export type CourseEnrollResponse2 = (CourseEnrollResponse);

export type CourseUnenrollData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type CourseUnenrollResponse = (unknown);

export type CourseUpdateLearningData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: CourseLearningRequest;
};

export type CourseUpdateLearningResponse = (unknown);

export type CourseGetCourseReportData = {
    accessToken?: (string | null);
    asOf?: (string | null);
    id: string;
    orderBy?: 'modified' | 'learning_start' | 'learning_end';
    page?: number;
    refreshToken?: (string | null);
    search?: (string | null);
    size?: number;
    upTo?: (string | null);
};

export type CourseGetCourseReportResponse = (Paginated_CourseReportResponse_);

export type CourseDownloadCourseReportData = {
    accessToken?: (string | null);
    asOf?: (string | null);
    id: string;
    orderBy?: 'modified' | 'learning_start' | 'learning_end';
    refreshToken?: (string | null);
    search?: (string | null);
    upTo?: (string | null);
};

export type CourseDownloadCourseReportResponse = (string);

export type CourseToggleActionData = {
    accessToken?: (string | null);
    action: 'bookmark' | 'like' | 'flag';
    id: string;
    refreshToken?: (string | null);
};

export type CourseToggleActionResponse = (unknown);

export type CourseCreateEsimsaCourseData = {
    accessToken?: (string | null);
    formData: Body_CourseCreateEsimsaCourse;
    refreshToken?: (string | null);
};

export type CourseCreateEsimsaCourseResponse = (CourseDisplayResponse);

export type SharedGetDisplaysData = {
    _public?: boolean;
    accessToken?: (string | null);
    channelOwner?: (string | null);
    excludes?: Array<('video' | 'playlist' | 'asset' | 'quiz' | 'survey' | 'exam' | 'course')>;
    filter?: 'history' | 'featured';
    kinds?: Array<('video' | 'playlist' | 'asset' | 'quiz' | 'survey' | 'exam' | 'course')>;
    orderBy?: "modified";
    page?: number;
    refreshToken?: (string | null);
    search?: (string | null);
    size?: number;
};

export type SharedGetDisplaysResponse = (Paginated_Union_VideoDisplayResponse__PlaylistDisplayResponse__AssetDisplayResponse__QuizDisplayResponse__SurveyDisplayResponse__ExamDisplayResponse__CourseDisplayResponse__);

export type SharedResourceSelectorData = {
    _public?: boolean;
    accessToken?: (string | null);
    excludes?: Array<('video' | 'playlist' | 'asset' | 'quiz' | 'survey' | 'exam' | 'lesson' | 'course' | 'channel')>;
    kinds?: Array<('video' | 'playlist' | 'asset' | 'quiz' | 'survey' | 'exam' | 'lesson' | 'course' | 'channel')>;
    refreshToken?: (string | null);
};

export type SharedResourceSelectorResponse = (Array<ResourceSchema>);

export type SharedGetBookmarkedContentData = {
    accessToken?: (string | null);
    kind?: ('video' | 'playlist' | 'asset' | 'quiz' | 'survey' | 'exam' | 'lesson' | 'course' | null);
    orderBy?: 'bookmarked_at' | 'title';
    page?: number;
    refreshToken?: (string | null);
    search?: (string | null);
    size?: number;
};

export type SharedGetBookmarkedContentResponse = (Paginated_BookmarkedContentResponse_);

export type SharedToggleBookmarkData = {
    accessToken?: (string | null);
    id: string;
    kind: 'video' | 'playlist' | 'asset' | 'quiz' | 'survey' | 'exam' | 'lesson' | 'course';
    refreshToken?: (string | null);
};

export type SharedToggleBookmarkResponse = (unknown);

export type SharedGetImportantData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
};

export type SharedGetImportantResponse = (ImportantResponse);

export type PublicGetOutlineData = {
    id: string;
    userId?: (string | null);
};

export type PublicGetOutlineResponse = (CourseOutlineReponse);

export type SearchSearchVideoContentData = {
    accessToken?: (string | null);
    orderBy?: "relevance";
    page?: number;
    q: string;
    refreshToken?: (string | null);
    size?: number;
};

export type SearchSearchVideoContentResponse = (Paginated_VideoSearchResultResponse_);

export type SearchSuggestVideoKeywordsData = {
    accessToken?: (string | null);
    q?: string;
    refreshToken?: (string | null);
};

export type SearchSuggestVideoKeywordsResponse = (Array<(string)>);

export type ChannelGetDisplaysData = {
    accessToken?: (string | null);
    joined?: (boolean | null);
    orderBy?: "created";
    page?: number;
    refreshToken?: (string | null);
    search?: (string | null);
    size?: number;
};

export type ChannelGetDisplaysResponse = (Paginated_ChannelDisplayResponse_);

export type ChannelGetChannelByUsernameData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
    username: string;
};

export type ChannelGetChannelByUsernameResponse = (ChannelDisplayResponse);

export type ChannelUpdateMyChannelData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
    requestBody: ChannelUpdateRequest;
};

export type ChannelUpdateMyChannelResponse = (ChannelUpdateResponse);

export type MemberGetDisplaysData = {
    accessToken?: (string | null);
    orderBy?: 'name' | 'created';
    page?: number;
    refreshToken?: (string | null);
    search?: (string | null);
    size?: number;
};

export type MemberGetDisplaysResponse = (Paginated_MemberDisplayResponse_);

export type MemberUploadMemberXlsxData = {
    accessToken?: (string | null);
    commit?: boolean;
    formData: Body_MemberUploadMemberXlsx;
    invitationUrl: string;
    invite?: boolean;
    refreshToken?: (string | null);
};

export type MemberUploadMemberXlsxResponse = (MemberXlsxResponse);

export type MemberDownloadMemberXlsxTemplateData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
};

export type MemberDownloadMemberXlsxTemplateResponse = (string);

export type MemberCheckMemberData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
    username: string;
};

export type MemberCheckMemberResponse = (UserResponse);

export type MemberCreateMemberData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
    requestBody: MemberCreateRequest;
};

export type MemberCreateMemberResponse = (MemberDisplayResponse);

export type MemberUpdateMemberData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: MemberUpdateRequest;
};

export type MemberUpdateMemberResponse = (unknown);

export type MemberDeleteMemberData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type MemberDeleteMemberResponse = (null);

export type MemberCreateRosterData = {
    accessToken?: (string | null);
    invitationUrl: string;
    invite?: boolean;
    refreshToken?: (string | null);
    requestBody: RosterCreateRequest;
};

export type MemberCreateRosterResponse = (MemberDisplayResponse);

export type MemberUpdateRosterData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: RosterUpdateRequest;
};

export type MemberUpdateRosterResponse = (unknown);

export type MemberDeleteRosterData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type MemberDeleteRosterResponse = (unknown);

export type MemberInviteUserData = {
    accessToken?: (string | null);
    invitationUrl: string;
    refreshToken?: (string | null);
    username: string;
};

export type MemberInviteUserResponse = (unknown);

export type MessageGetMessagesData = {
    accessToken?: (string | null);
    orderBy?: "time";
    page?: number;
    receiverId?: (string | null);
    refreshToken?: (string | null);
    search?: (string | null);
    senderId?: (string | null);
    size?: number;
};

export type MessageGetMessagesResponse = (Paginated_UserMessageResponse_);

export type MessageSendMemberMessageData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
    requestBody: MemberMessageRequest;
};

export type MessageSendMemberMessageResponse = (unknown);

export type MessageReadMessageData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
    requestBody: Array<(string)>;
};

export type MessageReadMessageResponse = (unknown);

export type AssistantGetMessagesData = {
    accessToken?: (string | null);
    orderBy?: "created";
    page?: number;
    refreshToken?: (string | null);
    role?: (MessageRole | null);
    search?: (string | null);
    size?: number;
};

export type AssistantGetMessagesResponse = (Paginated_MessageResponse_);

export type AssistantSendMessageData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
    requestBody: MessageRequest;
};

export type AssistantSendMessageResponse = (Array<MessageResponse>);

export type AssistantDeleteAllMessagesData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
};

export type AssistantDeleteAllMessagesResponse = (unknown);

export type AssistantDeleteMessageData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type AssistantDeleteMessageResponse = (unknown);

export type CertificateGetCourseCertificatesData = {
    accessToken?: (string | null);
    courseId: string;
    refreshToken?: (string | null);
};

export type CertificateGetCourseCertificatesResponse = (Array<CertificateResponse>);

export type CertificateRequestCourseCertificateData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
    requestBody: CertificateCreateRequest;
};

export type CertificateRequestCourseCertificateResponse = (unknown);

export type CertificateGetDisplaysData = {
    accessToken?: (string | null);
    orderBy?: "modified";
    owner?: (string | null);
    page?: number;
    refreshToken?: (string | null);
    search?: (string | null);
    size?: number;
};

export type CertificateGetDisplaysResponse = (Paginated_TemplateDisplayResponse_);

export type CertificateTemplateSelectorData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
};

export type CertificateTemplateSelectorResponse = (Array<TemplateSelectorResponse>);

export type CertificateGetResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type CertificateGetResourceResponse = (TemplateResourceResponse);

export type CertificateUpdateResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
    requestBody: TemplateResourceUpdateRequest;
};

export type CertificateUpdateResourceResponse = (TemplateResourceResponse);

export type CertificateDeleteResourceData = {
    accessToken?: (string | null);
    id: string;
    refreshToken?: (string | null);
};

export type CertificateDeleteResourceResponse = (unknown);

export type CertificateCreateResourceData = {
    accessToken?: (string | null);
    refreshToken?: (string | null);
    requestBody: TemplateResourceCreateRequest;
};

export type CertificateCreateResourceResponse = (TemplateResourceResponse);

export type PublicVerifyCertificateData = {
    id: string;
};

export type PublicVerifyCertificateResponse = (unknown);

export type PublicHealthCheckResponse = (unknown);